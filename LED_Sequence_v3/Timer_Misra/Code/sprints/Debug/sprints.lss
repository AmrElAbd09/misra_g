
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000d5e  00000df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006a  0080006a  00000dfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199f  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  0000298f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb9  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087e  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cdf  00000000  00000000  00004e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005afd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_1>
   8:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_2>
   c:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 02 	call	0x502	; 0x502 <main>
  8a:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_sequence>:
uint8_t u8_leds_flag = 0, u8_mode_flag=0 ,u8_int_error_enu_state_t=0 ,u8_error_enu_state_t2=0 ;
float g_delay_on=100,g_delay_off=900;

static void led_sequence(void)
{
	if(u8_leds_flag <7)
  92:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u8_leds_flag>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	20 f4       	brcc	.+8      	; 0xa2 <led_sequence+0x10>
	{	
		u8_leds_flag++;	
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <u8_leds_flag>
  a0:	08 95       	ret
	}
	else
	{	
		u8_leds_flag = 0;
  a2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <u8_leds_flag>
  a6:	08 95       	ret

000000a8 <blinking_mode>:
	}
}

static void blinking_mode(void)
{
	u8_mode_flag++;
  a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_mode_flag>
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u8_mode_flag>
	switch(u8_mode_flag)
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	19 f1       	breq	.+70     	; 0xfc <blinking_mode+0x54>
  b6:	18 f4       	brcc	.+6      	; 0xbe <blinking_mode+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	39 f0       	breq	.+14     	; 0xca <blinking_mode+0x22>
  bc:	66 c0       	rjmp	.+204    	; 0x18a <blinking_mode+0xe2>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	b1 f1       	breq	.+108    	; 0x12e <blinking_mode+0x86>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <blinking_mode+0x20>
  c6:	48 c0       	rjmp	.+144    	; 0x158 <blinking_mode+0xb0>
  c8:	60 c0       	rjmp	.+192    	; 0x18a <blinking_mode+0xe2>
	{
		
		case 1 :
		{
			g_delay_on=200;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	a8 e4       	ldi	r26, 0x48	; 72
  d0:	b3 e4       	ldi	r27, 0x43	; 67
  d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_delay_on>
  d6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_delay_on+0x1>
  da:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <g_delay_on+0x2>
  de:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <g_delay_on+0x3>
			g_delay_off=800;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a8 e4       	ldi	r26, 0x48	; 72
  e8:	b4 e4       	ldi	r27, 0x44	; 68
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			break;
  fa:	08 95       	ret
		}
	
		case 2 :
		{
			g_delay_on=300;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a6 e9       	ldi	r26, 0x96	; 150
 102:	b3 e4       	ldi	r27, 0x43	; 67
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_delay_on>
 108:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_delay_on+0x1>
 10c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <g_delay_on+0x2>
 110:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <g_delay_on+0x3>
			g_delay_off=700;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	af e2       	ldi	r26, 0x2F	; 47
 11a:	b4 e4       	ldi	r27, 0x44	; 68
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 128:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			break;
 12c:	08 95       	ret
		}
	
		case 3 :
		{
			g_delay_on=500;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	aa ef       	ldi	r26, 0xFA	; 250
 134:	b3 e4       	ldi	r27, 0x43	; 67
 136:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_delay_on>
 13a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_delay_on+0x1>
 13e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <g_delay_on+0x2>
 142:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <g_delay_on+0x3>
			g_delay_off=500;
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 152:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			break;
 156:	08 95       	ret
		}

		case 4 :
		{
			g_delay_on=800;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a8 e4       	ldi	r26, 0x48	; 72
 15e:	b4 e4       	ldi	r27, 0x44	; 68
 160:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_delay_on>
 164:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_delay_on+0x1>
 168:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <g_delay_on+0x2>
 16c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <g_delay_on+0x3>
			g_delay_off=200;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	a8 e4       	ldi	r26, 0x48	; 72
 176:	b3 e4       	ldi	r27, 0x43	; 67
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			break;
 188:	08 95       	ret
		}
		
		default:
		{
			u8_mode_flag = 0 ;
 18a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u8_mode_flag>
			g_delay_on=100;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	a8 ec       	ldi	r26, 0xC8	; 200
 194:	b2 e4       	ldi	r27, 0x42	; 66
 196:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_delay_on>
 19a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_delay_on+0x1>
 19e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <g_delay_on+0x2>
 1a2:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <g_delay_on+0x3>
			g_delay_off=900;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	a1 e6       	ldi	r26, 0x61	; 97
 1ac:	b4 e4       	ldi	r27, 0x44	; 68
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ba:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1be:	08 95       	ret

000001c0 <app_init>:
}


void app_init(void)
{
	 button_init(BUTTON_INT0_PORT,BUTTON_INT0_PIN);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <button_init>
	 button_init(BUTTON_INT1_PORT,BUTTON_INT1_PIN);
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <button_init>
	 led_init(PORT_B,PIN_0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 75 02 	call	0x4ea	; 0x4ea <led_init>
	 led_init(PORT_B,PIN_1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 75 02 	call	0x4ea	; 0x4ea <led_init>
	 led_init(PORT_B,PIN_2);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 75 02 	call	0x4ea	; 0x4ea <led_init>
	 led_init(PORT_B,PIN_3);	 
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 75 02 	call	0x4ea	; 0x4ea <led_init>
	SEI;
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
	u8_int_error_enu_state_t= ext_int_init(); 
 1f6:	0e 94 a4 03 	call	0x748	; 0x748 <ext_int_init>
 1fa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <u8_int_error_enu_state_t>
	u8_error_enu_state_t2=int0_set_callback(led_sequence);
 1fe:	89 e4       	ldi	r24, 0x49	; 73
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 b9 03 	call	0x772	; 0x772 <int0_set_callback>
 206:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	u8_error_enu_state_t2=int1_set_callback(blinking_mode);
 20a:	84 e5       	ldi	r24, 0x54	; 84
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 c2 03 	call	0x784	; 0x784 <int1_set_callback>
 212:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 216:	08 95       	ret

00000218 <app_start>:
}


void app_start()
{
	if (u8_leds_flag == 0)
 218:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u8_leds_flag>
 21c:	81 11       	cpse	r24, r1
 21e:	11 c0       	rjmp	.+34     	; 0x242 <app_start+0x2a>
	{
		led_off(PORT_B,PIN_0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);	
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
 240:	08 95       	ret
	}
	else if(u8_leds_flag == 1)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	41 f5       	brne	.+80     	; 0x296 <app_start+0x7e>
	{
		led_on(PORT_B,PIN_0);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 24c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 250:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 254:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 258:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 25c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_0);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);
 268:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 270:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 274:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 278:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_1);
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);	
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
 294:	08 95       	ret
	}
	else if (u8_leds_flag == 2)
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	69 f5       	brne	.+90     	; 0x2f4 <app_start+0xdc>
	{
		led_on(PORT_B,PIN_0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 2aa:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 2ae:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 2b2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 2b6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 2ba:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);		
 2ce:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2da:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2de:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_2);
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);		
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
 2f2:	08 95       	ret
	}
	else if (u8_leds_flag == 3)
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	89 f5       	brne	.+98     	; 0x35a <app_start+0x142>
	{
		led_on(PORT_B,PIN_0);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_1);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_2);
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 310:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 314:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 318:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 31c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 320:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);
 33c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 344:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 348:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 34c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_3);		
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
 358:	08 95       	ret
	}
	else if (u8_leds_flag == 4)
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	a9 f5       	brne	.+106    	; 0x3c8 <app_start+0x1b0>
	{
		led_on(PORT_B,PIN_0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_1);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_2);
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_3);
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 37e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 382:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 386:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 38a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 38e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);
 3b2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3be:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3c2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
 3c6:	08 95       	ret
	}
	else if (u8_leds_flag == 5)
 3c8:	85 30       	cpi	r24, 0x05	; 5
 3ca:	89 f5       	brne	.+98     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		led_off(PORT_B,PIN_0);	
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_on(PORT_B,PIN_1);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_2);
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_3);
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 3ec:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 3f0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 3f4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 3f8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 3fc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_1);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 408:	62 e0       	ldi	r22, 0x02	; 2
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);	
 418:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 420:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 424:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 428:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
 42c:	08 95       	ret
	}
	else if (u8_leds_flag == 6)
 42e:	86 30       	cpi	r24, 0x06	; 6
 430:	69 f5       	brne	.+90     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	{
		led_off(PORT_B,PIN_0);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_on(PORT_B,PIN_2);
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		led_on(PORT_B,PIN_3);
 44a:	63 e0       	ldi	r22, 0x03	; 3
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 452:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 456:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 45a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 45e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 462:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_2);
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_3);
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);		
 476:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 47a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 482:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 486:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
 48a:	08 95       	ret
	}
	else if (u8_leds_flag == 7)
 48c:	87 30       	cpi	r24, 0x07	; 7
 48e:	41 f5       	brne	.+80     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
	{
		led_off(PORT_B,PIN_0);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_off(PORT_B,PIN_2);
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		led_on(PORT_B,PIN_3);
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 79 02 	call	0x4f2	; 0x4f2 <led_on>
		timer_0_delay_ms(g_delay_on);
 4b0:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_delay_on>
 4b4:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <g_delay_on+0x1>
 4b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_delay_on+0x2>
 4bc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_delay_on+0x3>
 4c0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
		led_off(PORT_B,PIN_3);
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_off>
		timer_0_delay_ms(g_delay_off);
 4cc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4d8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4dc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <timer_0_delay_ms>
 4e0:	08 95       	ret

000004e2 <button_init>:
 */ 
#include "button.h"

enu_dio_error_t button_init(enu_ports_t enu_port ,enu_pins_t enu_pin)
{
	enu_dio_error_t loc_errorStatus = dio_init(enu_port,enu_pin,INPUT);
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	0e 94 86 02 	call	0x50c	; 0x50c <dio_init>
	return loc_errorStatus;
}
 4e8:	08 95       	ret

000004ea <led_init>:
 */ 
#include "led.h"

enu_dio_error_t led_init(enu_ports_t enu_port , enu_pins_t enu_pin)
{
	enu_dio_error_t loc_errorStatus = dio_init(enu_port,enu_pin,OUTPUT);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	0e 94 86 02 	call	0x50c	; 0x50c <dio_init>
	return loc_errorStatus;
}
 4f0:	08 95       	ret

000004f2 <led_on>:

enu_dio_error_t led_on (enu_ports_t enu_port , enu_pins_t enu_pin)
{
	enu_dio_error_t loc_errorStatus = dio_write(enu_port,enu_pin,HIGH);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	0e 94 15 03 	call	0x62a	; 0x62a <dio_write>
	return loc_errorStatus;
}
 4f8:	08 95       	ret

000004fa <led_off>:

enu_dio_error_t led_off(enu_ports_t enu_port , enu_pins_t enu_pin)
{
	enu_dio_error_t loc_errorStatus = dio_write(enu_port,enu_pin,LOW);	
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	0e 94 15 03 	call	0x62a	; 0x62a <dio_write>
	return loc_errorStatus;
}
 500:	08 95       	ret

00000502 <main>:
 

 
int main(void)
{
	app_init();
 502:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <app_init>
	
	while (1){
		app_start();
 506:	0e 94 0c 01 	call	0x218	; 0x218 <app_start>
 50a:	fd cf       	rjmp	.-6      	; 0x506 <main+0x4>

0000050c <dio_init>:
#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
	
	if(enu_pin<PIN_0 || enu_pin>PIN_7)
 50c:	68 30       	cpi	r22, 0x08	; 8
 50e:	08 f0       	brcs	.+2      	; 0x512 <dio_init+0x6>
 510:	80 c0       	rjmp	.+256    	; 0x612 <dio_init+0x106>
	{
		loc_ErrorStatus = Dio_PinError ;
	}
	else
	{	
		switch (enu_port)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	31 f1       	breq	.+76     	; 0x562 <dio_init+0x56>
 516:	38 f0       	brcs	.+14     	; 0x526 <dio_init+0x1a>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	09 f4       	brne	.+2      	; 0x51e <dio_init+0x12>
 51c:	40 c0       	rjmp	.+128    	; 0x59e <dio_init+0x92>
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	09 f4       	brne	.+2      	; 0x524 <dio_init+0x18>
 522:	5a c0       	rjmp	.+180    	; 0x5d8 <dio_init+0xcc>
 524:	78 c0       	rjmp	.+240    	; 0x616 <dio_init+0x10a>
		{

			case PORT_A :
			{
				if (enu_direction == INPUT)
 526:	41 11       	cpse	r20, r1
 528:	0d c0       	rjmp	.+26     	; 0x544 <dio_init+0x38>
				{
					CLR_BIT(DDRA,enu_pin);
 52a:	2a b3       	in	r18, 0x1a	; 26
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <dio_init+0x2a>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <dio_init+0x26>
 53a:	80 95       	com	r24
 53c:	82 23       	and	r24, r18
 53e:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
			case PORT_A :
			{
				if (enu_direction == INPUT)
				{
					CLR_BIT(DDRA,enu_pin);
					}else if ( enu_direction == OUTPUT){
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	09 f0       	breq	.+2      	; 0x54a <dio_init+0x3e>
 548:	68 c0       	rjmp	.+208    	; 0x61a <dio_init+0x10e>
					SET_BIT(DDRA,enu_pin);
 54a:	2a b3       	in	r18, 0x1a	; 26
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <dio_init+0x4a>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <dio_init+0x46>
 55a:	82 2b       	or	r24, r18
 55c:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
				}
				break;
			}	
			case PORT_B :
			{
				if (enu_direction == INPUT)
 562:	41 11       	cpse	r20, r1
 564:	0d c0       	rjmp	.+26     	; 0x580 <dio_init+0x74>
				{
					CLR_BIT(DDRB,enu_pin);
 566:	27 b3       	in	r18, 0x17	; 23
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <dio_init+0x66>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <dio_init+0x62>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret
			case PORT_B :
			{
				if (enu_direction == INPUT)
				{
					CLR_BIT(DDRB,enu_pin);
					}else if ( enu_direction == OUTPUT){
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	09 f0       	breq	.+2      	; 0x586 <dio_init+0x7a>
 584:	4c c0       	rjmp	.+152    	; 0x61e <dio_init+0x112>
					SET_BIT(DDRB,enu_pin);
 586:	27 b3       	in	r18, 0x17	; 23
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <dio_init+0x86>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <dio_init+0x82>
 596:	82 2b       	or	r24, r18
 598:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret
				}
				break;
			}		
			case PORT_C :
			{
				if (enu_direction == INPUT)
 59e:	41 11       	cpse	r20, r1
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <dio_init+0xb0>
				{
					CLR_BIT(DDRC,enu_pin);
 5a2:	24 b3       	in	r18, 0x14	; 20
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <dio_init+0xa2>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <dio_init+0x9e>
 5b2:	80 95       	com	r24
 5b4:	82 23       	and	r24, r18
 5b6:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
			case PORT_C :
			{
				if (enu_direction == INPUT)
				{
					CLR_BIT(DDRC,enu_pin);
					}else if ( enu_direction == OUTPUT){
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	89 f5       	brne	.+98     	; 0x622 <dio_init+0x116>
					SET_BIT(DDRC,enu_pin);
 5c0:	24 b3       	in	r18, 0x14	; 20
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <dio_init+0xc0>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <dio_init+0xbc>
 5d0:	82 2b       	or	r24, r18
 5d2:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
				}
				break;
			}	
			case PORT_D :
			{
				if (enu_direction == INPUT)
 5d8:	41 11       	cpse	r20, r1
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <dio_init+0xea>
				{
					CLR_BIT(DDRD,enu_pin);
 5dc:	21 b3       	in	r18, 0x11	; 17
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <dio_init+0xdc>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <dio_init+0xd8>
 5ec:	80 95       	com	r24
 5ee:	82 23       	and	r24, r18
 5f0:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret
			case PORT_D :
			{
				if (enu_direction == INPUT)
				{
					CLR_BIT(DDRD,enu_pin);
					}else if ( enu_direction == OUTPUT){
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	b1 f4       	brne	.+44     	; 0x626 <dio_init+0x11a>
					SET_BIT(DDRD,enu_pin);
 5fa:	21 b3       	in	r18, 0x11	; 17
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <dio_init+0xfa>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <dio_init+0xf6>
 60a:	82 2b       	or	r24, r18
 60c:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

enu_dio_error_t dio_init(enu_ports_t enu_port, enu_pins_t enu_pin , enu_pin_direction_t enu_direction){
	enu_dio_error_t loc_ErrorStatus = Dio_Ok;
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	08 95       	ret
	
	if(enu_pin<PIN_0 || enu_pin>PIN_7)
	{
		loc_ErrorStatus = Dio_PinError ;
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	08 95       	ret
				}
				break;
			}	
			default:
			{
				loc_ErrorStatus = Dio_PortError;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	08 95       	ret
					CLR_BIT(DDRA,enu_pin);
					}else if ( enu_direction == OUTPUT){
					SET_BIT(DDRA,enu_pin);
					}else{
					// error handling
					loc_ErrorStatus = Dio_DirectionError;
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	08 95       	ret
					CLR_BIT(DDRB,enu_pin);
					}else if ( enu_direction == OUTPUT){
					SET_BIT(DDRB,enu_pin);
					}else{
					// error handling
					loc_ErrorStatus = Dio_DirectionError;
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	08 95       	ret
					CLR_BIT(DDRC,enu_pin);
					}else if ( enu_direction == OUTPUT){
					SET_BIT(DDRC,enu_pin);
					}else{
					// error handling
					loc_ErrorStatus = Dio_DirectionError;
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	08 95       	ret
					CLR_BIT(DDRD,enu_pin);
					}else if ( enu_direction == OUTPUT){
					SET_BIT(DDRD,enu_pin);
					}else{
					// error handling
					loc_ErrorStatus = Dio_DirectionError;
 626:	84 e0       	ldi	r24, 0x04	; 4
				break;
			}
		}
	}
	return loc_ErrorStatus ;
}
 628:	08 95       	ret

0000062a <dio_write>:


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
	
	if(enu_pin<PIN_0 || enu_pin>PIN_7){
 62a:	68 30       	cpi	r22, 0x08	; 8
 62c:	08 f0       	brcs	.+2      	; 0x630 <dio_write+0x6>
 62e:	80 c0       	rjmp	.+256    	; 0x730 <dio_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (enu_port)
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	31 f1       	breq	.+76     	; 0x680 <dio_write+0x56>
 634:	38 f0       	brcs	.+14     	; 0x644 <dio_write+0x1a>
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	09 f4       	brne	.+2      	; 0x63c <dio_write+0x12>
 63a:	40 c0       	rjmp	.+128    	; 0x6bc <dio_write+0x92>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	09 f4       	brne	.+2      	; 0x642 <dio_write+0x18>
 640:	5a c0       	rjmp	.+180    	; 0x6f6 <dio_write+0xcc>
 642:	78 c0       	rjmp	.+240    	; 0x734 <dio_write+0x10a>
		{
			case PORT_A :
			{
				if (enu_value == LOW)
 644:	41 11       	cpse	r20, r1
 646:	0d c0       	rjmp	.+26     	; 0x662 <dio_write+0x38>
				{
					CLR_BIT(PORTA,enu_pin);
 648:	2b b3       	in	r18, 0x1b	; 27
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <dio_write+0x2a>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <dio_write+0x26>
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	8b bb       	out	0x1b, r24	; 27
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
			{
				if (enu_value == LOW)
				{
					CLR_BIT(PORTA,enu_pin);
					
					}else if ( enu_value == HIGH){
 662:	41 30       	cpi	r20, 0x01	; 1
 664:	09 f0       	breq	.+2      	; 0x668 <dio_write+0x3e>
 666:	68 c0       	rjmp	.+208    	; 0x738 <dio_write+0x10e>
					
					SET_BIT(PORTA,enu_pin);
 668:	2b b3       	in	r18, 0x1b	; 27
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <dio_write+0x4a>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <dio_write+0x46>
 678:	82 2b       	or	r24, r18
 67a:	8b bb       	out	0x1b, r24	; 27
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	08 95       	ret
				}
				break;
			}
			case PORT_B :
			{
				if (enu_value == LOW)
 680:	41 11       	cpse	r20, r1
 682:	0d c0       	rjmp	.+26     	; 0x69e <dio_write+0x74>
				{
					CLR_BIT(PORTB,enu_pin);
 684:	28 b3       	in	r18, 0x18	; 24
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <dio_write+0x66>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <dio_write+0x62>
 694:	80 95       	com	r24
 696:	82 23       	and	r24, r18
 698:	88 bb       	out	0x18, r24	; 24
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	08 95       	ret
			{
				if (enu_value == LOW)
				{
					CLR_BIT(PORTB,enu_pin);
					
					}else if ( enu_value == HIGH){
 69e:	41 30       	cpi	r20, 0x01	; 1
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <dio_write+0x7a>
 6a2:	4c c0       	rjmp	.+152    	; 0x73c <dio_write+0x112>
					
					SET_BIT(PORTB,enu_pin);
 6a4:	28 b3       	in	r18, 0x18	; 24
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <dio_write+0x86>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <dio_write+0x82>
 6b4:	82 2b       	or	r24, r18
 6b6:	88 bb       	out	0x18, r24	; 24
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	08 95       	ret
				}
				break;
			}
			case PORT_C :
			{
				if (enu_value == LOW)
 6bc:	41 11       	cpse	r20, r1
 6be:	0d c0       	rjmp	.+26     	; 0x6da <dio_write+0xb0>
				{
					CLR_BIT(PORTC,enu_pin);
 6c0:	25 b3       	in	r18, 0x15	; 21
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <dio_write+0xa2>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <dio_write+0x9e>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	85 bb       	out	0x15, r24	; 21
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
			{
				if (enu_value == LOW)
				{
					CLR_BIT(PORTC,enu_pin);
					
					}else if ( enu_value == HIGH){
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	89 f5       	brne	.+98     	; 0x740 <dio_write+0x116>
					
					SET_BIT(PORTC,enu_pin);
 6de:	25 b3       	in	r18, 0x15	; 21
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <dio_write+0xc0>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <dio_write+0xbc>
 6ee:	82 2b       	or	r24, r18
 6f0:	85 bb       	out	0x15, r24	; 21
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
				}
				break;
			}
			case PORT_D :
			{
				if (enu_value == LOW)
 6f6:	41 11       	cpse	r20, r1
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <dio_write+0xea>
				{
					CLR_BIT(PORTD,enu_pin);
 6fa:	22 b3       	in	r18, 0x12	; 18
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <dio_write+0xdc>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <dio_write+0xd8>
 70a:	80 95       	com	r24
 70c:	82 23       	and	r24, r18
 70e:	82 bb       	out	0x12, r24	; 18
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret
			{
				if (enu_value == LOW)
				{
					CLR_BIT(PORTD,enu_pin);
					
					}else if ( enu_value == HIGH){
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	b1 f4       	brne	.+44     	; 0x744 <dio_write+0x11a>
					
					SET_BIT(PORTD,enu_pin);
 718:	22 b3       	in	r18, 0x12	; 18
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <dio_write+0xfa>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <dio_write+0xf6>
 728:	82 2b       	or	r24, r18
 72a:	82 bb       	out	0x12, r24	; 18
	return loc_ErrorStatus ;
}


enu_dio_error_t dio_write(enu_ports_t enu_port, enu_pins_t enu_pin , enu_state_t enu_value){
	enu_dio_error_t loc_errorStatus = Dio_Ok ;
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	08 95       	ret
	
	if(enu_pin<PIN_0 || enu_pin>PIN_7){
		loc_errorStatus = Dio_PinError ;
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	08 95       	ret
				}
				break;
			}	
			default:
			{
				loc_errorStatus = Dio_PortError ;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	08 95       	ret
					}else if ( enu_value == HIGH){
					
					SET_BIT(PORTA,enu_pin);
					}else{
					// error handling
					loc_errorStatus = Dio_ValueError ;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	08 95       	ret
					}else if ( enu_value == HIGH){
					
					SET_BIT(PORTB,enu_pin);
					}else{
					// error handling
					loc_errorStatus = Dio_ValueError ;
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	08 95       	ret
					}else if ( enu_value == HIGH){
					
					SET_BIT(PORTC,enu_pin);
					}else{
					// error handling
					loc_errorStatus = Dio_ValueError ;
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	08 95       	ret
					
					SET_BIT(PORTD,enu_pin);
					
					}else{
					// error handling
					loc_errorStatus = Dio_ValueError ;
 744:	83 e0       	ldi	r24, 0x03	; 3
				break;
			}						
		}
	}
	return loc_errorStatus;
}
 746:	08 95       	ret

00000748 <ext_int_init>:
	}
	else
	{
		//do nothing
	}
}
 748:	85 b7       	in	r24, 0x35	; 53
 74a:	82 60       	ori	r24, 0x02	; 2
 74c:	85 bf       	out	0x35, r24	; 53
 74e:	85 b7       	in	r24, 0x35	; 53
 750:	8e 7f       	andi	r24, 0xFE	; 254
 752:	85 bf       	out	0x35, r24	; 53
 754:	8b b7       	in	r24, 0x3b	; 59
 756:	80 64       	ori	r24, 0x40	; 64
 758:	8b bf       	out	0x3b, r24	; 59
 75a:	85 b7       	in	r24, 0x35	; 53
 75c:	88 60       	ori	r24, 0x08	; 8
 75e:	85 bf       	out	0x35, r24	; 53
 760:	85 b7       	in	r24, 0x35	; 53
 762:	8b 7f       	andi	r24, 0xFB	; 251
 764:	85 bf       	out	0x35, r24	; 53
 766:	8b b7       	in	r24, 0x3b	; 59
 768:	80 68       	ori	r24, 0x80	; 128
 76a:	8b bf       	out	0x3b, r24	; 59
 76c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <enu_ext_int_error_status>
 770:	08 95       	ret

00000772 <int0_set_callback>:
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	31 f0       	breq	.+12     	; 0x782 <int0_set_callback+0x10>
 776:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <int0_callback_function+0x1>
 77a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <int0_callback_function>
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	08 95       	ret
 782:	08 95       	ret

00000784 <int1_set_callback>:
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	31 f0       	breq	.+12     	; 0x794 <int1_set_callback+0x10>
 788:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <int1_callback_function+0x1>
 78c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <int1_callback_function>
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	08 95       	ret
 794:	08 95       	ret

00000796 <__vector_1>:
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0)
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	int0_callback_function();	
 7b8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <int0_callback_function>
 7bc:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <int0_callback_function+0x1>
 7c0:	09 95       	icall
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1)
{
 7e4:	1f 92       	push	r1
 7e6:	0f 92       	push	r0
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	0f 92       	push	r0
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 93       	push	r18
 7f0:	3f 93       	push	r19
 7f2:	4f 93       	push	r20
 7f4:	5f 93       	push	r21
 7f6:	6f 93       	push	r22
 7f8:	7f 93       	push	r23
 7fa:	8f 93       	push	r24
 7fc:	9f 93       	push	r25
 7fe:	af 93       	push	r26
 800:	bf 93       	push	r27
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
	int1_callback_function();
 806:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <int1_callback_function>
 80a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <int1_callback_function+0x1>
 80e:	09 95       	icall
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2)
{
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	4f 93       	push	r20
 842:	5f 93       	push	r21
 844:	6f 93       	push	r22
 846:	7f 93       	push	r23
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
	int2_callback_function();
 854:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <int2_callback_function>
 858:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <int2_callback_function+0x1>
 85c:	09 95       	icall
 85e:	ff 91       	pop	r31
 860:	ef 91       	pop	r30
 862:	bf 91       	pop	r27
 864:	af 91       	pop	r26
 866:	9f 91       	pop	r25
 868:	8f 91       	pop	r24
 86a:	7f 91       	pop	r23
 86c:	6f 91       	pop	r22
 86e:	5f 91       	pop	r21
 870:	4f 91       	pop	r20
 872:	3f 91       	pop	r19
 874:	2f 91       	pop	r18
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	1f 90       	pop	r1
 87e:	18 95       	reti

00000880 <timer_0_init>:

void timer_0_stop(void)
{
	CLR_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);
 880:	84 30       	cpi	r24, 0x04	; 4
 882:	40 f5       	brcc	.+80     	; 0x8d4 <timer_0_init+0x54>
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	f1 f0       	breq	.+60     	; 0x8c4 <timer_0_init+0x44>
 888:	28 f0       	brcs	.+10     	; 0x894 <timer_0_init+0x14>
 88a:	82 30       	cpi	r24, 0x02	; 2
 88c:	99 f0       	breq	.+38     	; 0x8b4 <timer_0_init+0x34>
 88e:	83 30       	cpi	r24, 0x03	; 3
 890:	49 f0       	breq	.+18     	; 0x8a4 <timer_0_init+0x24>
 892:	22 c0       	rjmp	.+68     	; 0x8d8 <timer_0_init+0x58>
 894:	83 b7       	in	r24, 0x33	; 51
 896:	8f 7b       	andi	r24, 0xBF	; 191
 898:	83 bf       	out	0x33, r24	; 51
 89a:	83 b7       	in	r24, 0x33	; 51
 89c:	87 7f       	andi	r24, 0xF7	; 247
 89e:	83 bf       	out	0x33, r24	; 51
 8a0:	84 e0       	ldi	r24, 0x04	; 4
 8a2:	08 95       	ret
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	80 64       	ori	r24, 0x40	; 64
 8a8:	83 bf       	out	0x33, r24	; 51
 8aa:	83 b7       	in	r24, 0x33	; 51
 8ac:	87 7f       	andi	r24, 0xF7	; 247
 8ae:	83 bf       	out	0x33, r24	; 51
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	08 95       	ret
 8b4:	83 b7       	in	r24, 0x33	; 51
 8b6:	8f 7b       	andi	r24, 0xBF	; 191
 8b8:	83 bf       	out	0x33, r24	; 51
 8ba:	83 b7       	in	r24, 0x33	; 51
 8bc:	88 60       	ori	r24, 0x08	; 8
 8be:	83 bf       	out	0x33, r24	; 51
 8c0:	84 e0       	ldi	r24, 0x04	; 4
 8c2:	08 95       	ret
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	80 64       	ori	r24, 0x40	; 64
 8c8:	83 bf       	out	0x33, r24	; 51
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	88 60       	ori	r24, 0x08	; 8
 8ce:	83 bf       	out	0x33, r24	; 51
 8d0:	84 e0       	ldi	r24, 0x04	; 4
 8d2:	08 95       	ret
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	08 95       	ret
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	08 95       	ret

000008dc <timer_0_start>:
 8dc:	85 30       	cpi	r24, 0x05	; 5
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <timer_0_start+0x6>
 8e0:	44 c0       	rjmp	.+136    	; 0x96a <timer_0_start+0x8e>
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	09 f1       	breq	.+66     	; 0x928 <timer_0_start+0x4c>
 8e6:	28 f4       	brcc	.+10     	; 0x8f2 <timer_0_start+0x16>
 8e8:	88 23       	and	r24, r24
 8ea:	41 f0       	breq	.+16     	; 0x8fc <timer_0_start+0x20>
 8ec:	81 30       	cpi	r24, 0x01	; 1
 8ee:	89 f0       	breq	.+34     	; 0x912 <timer_0_start+0x36>
 8f0:	3e c0       	rjmp	.+124    	; 0x96e <timer_0_start+0x92>
 8f2:	83 30       	cpi	r24, 0x03	; 3
 8f4:	21 f1       	breq	.+72     	; 0x93e <timer_0_start+0x62>
 8f6:	84 30       	cpi	r24, 0x04	; 4
 8f8:	69 f1       	breq	.+90     	; 0x954 <timer_0_start+0x78>
 8fa:	39 c0       	rjmp	.+114    	; 0x96e <timer_0_start+0x92>
 8fc:	83 b7       	in	r24, 0x33	; 51
 8fe:	81 60       	ori	r24, 0x01	; 1
 900:	83 bf       	out	0x33, r24	; 51
 902:	83 b7       	in	r24, 0x33	; 51
 904:	8d 7f       	andi	r24, 0xFD	; 253
 906:	83 bf       	out	0x33, r24	; 51
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	8b 7f       	andi	r24, 0xFB	; 251
 90c:	83 bf       	out	0x33, r24	; 51
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	08 95       	ret
 912:	83 b7       	in	r24, 0x33	; 51
 914:	82 60       	ori	r24, 0x02	; 2
 916:	83 bf       	out	0x33, r24	; 51
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	8e 7f       	andi	r24, 0xFE	; 254
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	8b 7f       	andi	r24, 0xFB	; 251
 922:	83 bf       	out	0x33, r24	; 51
 924:	84 e0       	ldi	r24, 0x04	; 4
 926:	08 95       	ret
 928:	83 b7       	in	r24, 0x33	; 51
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	83 bf       	out	0x33, r24	; 51
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	82 60       	ori	r24, 0x02	; 2
 932:	83 bf       	out	0x33, r24	; 51
 934:	83 b7       	in	r24, 0x33	; 51
 936:	8b 7f       	andi	r24, 0xFB	; 251
 938:	83 bf       	out	0x33, r24	; 51
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	08 95       	ret
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	84 60       	ori	r24, 0x04	; 4
 942:	83 bf       	out	0x33, r24	; 51
 944:	83 b7       	in	r24, 0x33	; 51
 946:	8d 7f       	andi	r24, 0xFD	; 253
 948:	83 bf       	out	0x33, r24	; 51
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	8e 7f       	andi	r24, 0xFE	; 254
 94e:	83 bf       	out	0x33, r24	; 51
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	08 95       	ret
 954:	83 b7       	in	r24, 0x33	; 51
 956:	81 60       	ori	r24, 0x01	; 1
 958:	83 bf       	out	0x33, r24	; 51
 95a:	83 b7       	in	r24, 0x33	; 51
 95c:	8d 7f       	andi	r24, 0xFD	; 253
 95e:	83 bf       	out	0x33, r24	; 51
 960:	83 b7       	in	r24, 0x33	; 51
 962:	84 60       	ori	r24, 0x04	; 4
 964:	83 bf       	out	0x33, r24	; 51
 966:	84 e0       	ldi	r24, 0x04	; 4
 968:	08 95       	ret
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	08 95       	ret
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	08 95       	ret

00000972 <timer_0_initial_value>:
{
	enu_timer_error_status_t enu_timer_error_status = TIMER_OK;

	if(a_value < TIMR0_MAX_VALUE && a_value >= 0)
	{	
		TCNT0 = a_value ;
 972:	82 bf       	out	0x32, r24	; 50
	else
	{
		enu_timer_error_status = INVALID_VALUE;
	}
	return enu_timer_error_status ;
}
 974:	84 e0       	ldi	r24, 0x04	; 4
 976:	08 95       	ret

00000978 <timer_0_ovf_num>:


enu_timer_error_status_t timer_0_ovf_num(double a_overflow)
{
 978:	8f 92       	push	r8
 97a:	9f 92       	push	r9
 97c:	af 92       	push	r10
 97e:	bf 92       	push	r11
 980:	cf 92       	push	r12
 982:	df 92       	push	r13
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	4b 01       	movw	r8, r22
 98a:	5c 01       	movw	r10, r24
	enu_timer_error_status_t enu_timer_error_status = TIMER_OK;
	double num_ovf = 0;
	if (a_overflow > 0)
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	a9 01       	movw	r20, r18
 992:	0e 94 a8 06 	call	0xd50	; 0xd50 <__gesf2>
 996:	18 16       	cp	r1, r24
 998:	94 f0       	brlt	.+36     	; 0x9be <timer_0_ovf_num+0x46>
 99a:	1e c0       	rjmp	.+60     	; 0x9d8 <timer_0_ovf_num+0x60>
	{
		
		while(num_ovf < a_overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 99c:	08 b6       	in	r0, 0x38	; 56
 99e:	00 fe       	sbrs	r0, 0
 9a0:	fd cf       	rjmp	.-6      	; 0x99c <timer_0_ovf_num+0x24>
			SET_BIT(TIFR,TOV0);
 9a2:	88 b7       	in	r24, 0x38	; 56
 9a4:	81 60       	ori	r24, 0x01	; 1
 9a6:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 9a8:	20 e0       	ldi	r18, 0x00	; 0
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	40 e8       	ldi	r20, 0x80	; 128
 9ae:	5f e3       	ldi	r21, 0x3F	; 63
 9b0:	c7 01       	movw	r24, r14
 9b2:	b6 01       	movw	r22, r12
 9b4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__addsf3>
 9b8:	6b 01       	movw	r12, r22
 9ba:	7c 01       	movw	r14, r24
 9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <timer_0_ovf_num+0x4c>
 9be:	c1 2c       	mov	r12, r1
 9c0:	d1 2c       	mov	r13, r1
 9c2:	76 01       	movw	r14, r12
	enu_timer_error_status_t enu_timer_error_status = TIMER_OK;
	double num_ovf = 0;
	if (a_overflow > 0)
	{
		
		while(num_ovf < a_overflow){
 9c4:	a5 01       	movw	r20, r10
 9c6:	94 01       	movw	r18, r8
 9c8:	c7 01       	movw	r24, r14
 9ca:	b6 01       	movw	r22, r12
 9cc:	0e 94 bc 05 	call	0xb78	; 0xb78 <__cmpsf2>
 9d0:	88 23       	and	r24, r24
 9d2:	24 f3       	brlt	.-56     	; 0x99c <timer_0_ovf_num+0x24>
}


enu_timer_error_status_t timer_0_ovf_num(double a_overflow)
{
	enu_timer_error_status_t enu_timer_error_status = TIMER_OK;
 9d4:	84 e0       	ldi	r24, 0x04	; 4
 9d6:	2a c0       	rjmp	.+84     	; 0xa2c <timer_0_ovf_num+0xb4>
			SET_BIT(TIFR,TOV0);
			num_ovf++;
		}
		num_ovf = 0;
	}
	else if (a_overflow <= 0)
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	a9 01       	movw	r20, r18
 9de:	c5 01       	movw	r24, r10
 9e0:	b4 01       	movw	r22, r8
 9e2:	0e 94 bc 05 	call	0xb78	; 0xb78 <__cmpsf2>
 9e6:	18 16       	cp	r1, r24
 9e8:	9c f4       	brge	.+38     	; 0xa10 <timer_0_ovf_num+0x98>
		num_ovf = 0;
	}
		
	else
	{
		enu_timer_error_status = INVALID_OVF;
 9ea:	82 e0       	ldi	r24, 0x02	; 2
 9ec:	1f c0       	rjmp	.+62     	; 0xa2c <timer_0_ovf_num+0xb4>
	else if (a_overflow <= 0)
	{
		a_overflow = 1 ;
		while(num_ovf < a_overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 9ee:	08 b6       	in	r0, 0x38	; 56
 9f0:	00 fe       	sbrs	r0, 0
 9f2:	fd cf       	rjmp	.-6      	; 0x9ee <timer_0_ovf_num+0x76>
			SET_BIT(TIFR,TOV0);
 9f4:	88 b7       	in	r24, 0x38	; 56
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	40 e8       	ldi	r20, 0x80	; 128
 a00:	5f e3       	ldi	r21, 0x3F	; 63
 a02:	c7 01       	movw	r24, r14
 a04:	b6 01       	movw	r22, r12
 a06:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__addsf3>
 a0a:	6b 01       	movw	r12, r22
 a0c:	7c 01       	movw	r14, r24
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <timer_0_ovf_num+0x9e>
 a10:	c1 2c       	mov	r12, r1
 a12:	d1 2c       	mov	r13, r1
 a14:	76 01       	movw	r14, r12
		num_ovf = 0;
	}
	else if (a_overflow <= 0)
	{
		a_overflow = 1 ;
		while(num_ovf < a_overflow){
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	40 e8       	ldi	r20, 0x80	; 128
 a1c:	5f e3       	ldi	r21, 0x3F	; 63
 a1e:	c7 01       	movw	r24, r14
 a20:	b6 01       	movw	r22, r12
 a22:	0e 94 bc 05 	call	0xb78	; 0xb78 <__cmpsf2>
 a26:	88 23       	and	r24, r24
 a28:	14 f3       	brlt	.-60     	; 0x9ee <timer_0_ovf_num+0x76>
}


enu_timer_error_status_t timer_0_ovf_num(double a_overflow)
{
	enu_timer_error_status_t enu_timer_error_status = TIMER_OK;
 a2a:	84 e0       	ldi	r24, 0x04	; 4
	{
		enu_timer_error_status = INVALID_OVF;
	}
	
	return enu_timer_error_status;
}
 a2c:	ff 90       	pop	r15
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	bf 90       	pop	r11
 a36:	af 90       	pop	r10
 a38:	9f 90       	pop	r9
 a3a:	8f 90       	pop	r8
 a3c:	08 95       	ret

00000a3e <timer_0_delay_ms>:

void timer_0_delay_ms(double a_time_ms)
{
	g_tick = a_time_ms/1000 ;
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	4a e7       	ldi	r20, 0x7A	; 122
 a44:	54 e4       	ldi	r21, 0x44	; 68
 a46:	0e 94 c1 05 	call	0xb82	; 0xb82 <__divsf3>
 a4a:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <g_tick>
 a4e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <g_tick+0x1>
 a52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <g_tick+0x2>
 a56:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <g_tick+0x3>
	g_ovf_num =  (g_tick / 0.000256) ;
 a5a:	2d eb       	ldi	r18, 0xBD	; 189
 a5c:	37 e3       	ldi	r19, 0x37	; 55
 a5e:	46 e8       	ldi	r20, 0x86	; 134
 a60:	59 e3       	ldi	r21, 0x39	; 57
 a62:	0e 94 c1 05 	call	0xb82	; 0xb82 <__divsf3>
 a66:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <g_ovf_num>
 a6a:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <g_ovf_num+0x1>
 a6e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_ovf_num+0x2>
 a72:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <g_ovf_num+0x3>
	timer_0_init(NORMAL_MODE);
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	0e 94 40 04 	call	0x880	; 0x880 <timer_0_init>
	timer_0_initial_value(0);
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	0e 94 b9 04 	call	0x972	; 0x972 <timer_0_initial_value>
	timer_0_start(PRECALER_1);
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	0e 94 6e 04 	call	0x8dc	; 0x8dc <timer_0_start>
	timer_0_ovf_num(g_ovf_num);	
 a88:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <g_ovf_num>
 a8c:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <g_ovf_num+0x1>
 a90:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_ovf_num+0x2>
 a94:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <g_ovf_num+0x3>
 a98:	0e 94 bc 04 	call	0x978	; 0x978 <timer_0_ovf_num>
 a9c:	08 95       	ret

00000a9e <__subsf3>:
 a9e:	50 58       	subi	r21, 0x80	; 128

00000aa0 <__addsf3>:
 aa0:	bb 27       	eor	r27, r27
 aa2:	aa 27       	eor	r26, r26
 aa4:	0e 94 67 05 	call	0xace	; 0xace <__addsf3x>
 aa8:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_round>
 aac:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscA>
 ab0:	38 f0       	brcs	.+14     	; 0xac0 <__addsf3+0x20>
 ab2:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_pscB>
 ab6:	20 f0       	brcs	.+8      	; 0xac0 <__addsf3+0x20>
 ab8:	39 f4       	brne	.+14     	; 0xac8 <__addsf3+0x28>
 aba:	9f 3f       	cpi	r25, 0xFF	; 255
 abc:	19 f4       	brne	.+6      	; 0xac4 <__addsf3+0x24>
 abe:	26 f4       	brtc	.+8      	; 0xac8 <__addsf3+0x28>
 ac0:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_nan>
 ac4:	0e f4       	brtc	.+2      	; 0xac8 <__addsf3+0x28>
 ac6:	e0 95       	com	r30
 ac8:	e7 fb       	bst	r30, 7
 aca:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_inf>

00000ace <__addsf3x>:
 ace:	e9 2f       	mov	r30, r25
 ad0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_split3>
 ad4:	58 f3       	brcs	.-42     	; 0xaac <__addsf3+0xc>
 ad6:	ba 17       	cp	r27, r26
 ad8:	62 07       	cpc	r22, r18
 ada:	73 07       	cpc	r23, r19
 adc:	84 07       	cpc	r24, r20
 ade:	95 07       	cpc	r25, r21
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__addsf3x+0x1c>
 ae2:	79 f4       	brne	.+30     	; 0xb02 <__addsf3x+0x34>
 ae4:	a6 f5       	brtc	.+104    	; 0xb4e <__addsf3x+0x80>
 ae6:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_zero>
 aea:	0e f4       	brtc	.+2      	; 0xaee <__addsf3x+0x20>
 aec:	e0 95       	com	r30
 aee:	0b 2e       	mov	r0, r27
 af0:	ba 2f       	mov	r27, r26
 af2:	a0 2d       	mov	r26, r0
 af4:	0b 01       	movw	r0, r22
 af6:	b9 01       	movw	r22, r18
 af8:	90 01       	movw	r18, r0
 afa:	0c 01       	movw	r0, r24
 afc:	ca 01       	movw	r24, r20
 afe:	a0 01       	movw	r20, r0
 b00:	11 24       	eor	r1, r1
 b02:	ff 27       	eor	r31, r31
 b04:	59 1b       	sub	r21, r25
 b06:	99 f0       	breq	.+38     	; 0xb2e <__addsf3x+0x60>
 b08:	59 3f       	cpi	r21, 0xF9	; 249
 b0a:	50 f4       	brcc	.+20     	; 0xb20 <__addsf3x+0x52>
 b0c:	50 3e       	cpi	r21, 0xE0	; 224
 b0e:	68 f1       	brcs	.+90     	; 0xb6a <__addsf3x+0x9c>
 b10:	1a 16       	cp	r1, r26
 b12:	f0 40       	sbci	r31, 0x00	; 0
 b14:	a2 2f       	mov	r26, r18
 b16:	23 2f       	mov	r18, r19
 b18:	34 2f       	mov	r19, r20
 b1a:	44 27       	eor	r20, r20
 b1c:	58 5f       	subi	r21, 0xF8	; 248
 b1e:	f3 cf       	rjmp	.-26     	; 0xb06 <__addsf3x+0x38>
 b20:	46 95       	lsr	r20
 b22:	37 95       	ror	r19
 b24:	27 95       	ror	r18
 b26:	a7 95       	ror	r26
 b28:	f0 40       	sbci	r31, 0x00	; 0
 b2a:	53 95       	inc	r21
 b2c:	c9 f7       	brne	.-14     	; 0xb20 <__addsf3x+0x52>
 b2e:	7e f4       	brtc	.+30     	; 0xb4e <__addsf3x+0x80>
 b30:	1f 16       	cp	r1, r31
 b32:	ba 0b       	sbc	r27, r26
 b34:	62 0b       	sbc	r22, r18
 b36:	73 0b       	sbc	r23, r19
 b38:	84 0b       	sbc	r24, r20
 b3a:	ba f0       	brmi	.+46     	; 0xb6a <__addsf3x+0x9c>
 b3c:	91 50       	subi	r25, 0x01	; 1
 b3e:	a1 f0       	breq	.+40     	; 0xb68 <__addsf3x+0x9a>
 b40:	ff 0f       	add	r31, r31
 b42:	bb 1f       	adc	r27, r27
 b44:	66 1f       	adc	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	c2 f7       	brpl	.-16     	; 0xb3c <__addsf3x+0x6e>
 b4c:	0e c0       	rjmp	.+28     	; 0xb6a <__addsf3x+0x9c>
 b4e:	ba 0f       	add	r27, r26
 b50:	62 1f       	adc	r22, r18
 b52:	73 1f       	adc	r23, r19
 b54:	84 1f       	adc	r24, r20
 b56:	48 f4       	brcc	.+18     	; 0xb6a <__addsf3x+0x9c>
 b58:	87 95       	ror	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b7 95       	ror	r27
 b60:	f7 95       	ror	r31
 b62:	9e 3f       	cpi	r25, 0xFE	; 254
 b64:	08 f0       	brcs	.+2      	; 0xb68 <__addsf3x+0x9a>
 b66:	b0 cf       	rjmp	.-160    	; 0xac8 <__addsf3+0x28>
 b68:	93 95       	inc	r25
 b6a:	88 0f       	add	r24, r24
 b6c:	08 f0       	brcs	.+2      	; 0xb70 <__addsf3x+0xa2>
 b6e:	99 27       	eor	r25, r25
 b70:	ee 0f       	add	r30, r30
 b72:	97 95       	ror	r25
 b74:	87 95       	ror	r24
 b76:	08 95       	ret

00000b78 <__cmpsf2>:
 b78:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_cmp>
 b7c:	08 f4       	brcc	.+2      	; 0xb80 <__cmpsf2+0x8>
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	08 95       	ret

00000b82 <__divsf3>:
 b82:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divsf3x>
 b86:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_round>
 b8a:	0e 94 67 06 	call	0xcce	; 0xcce <__fp_pscB>
 b8e:	58 f0       	brcs	.+22     	; 0xba6 <__divsf3+0x24>
 b90:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscA>
 b94:	40 f0       	brcs	.+16     	; 0xba6 <__divsf3+0x24>
 b96:	29 f4       	brne	.+10     	; 0xba2 <__divsf3+0x20>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	29 f0       	breq	.+10     	; 0xba6 <__divsf3+0x24>
 b9c:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_inf>
 ba0:	51 11       	cpse	r21, r1
 ba2:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_szero>
 ba6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_nan>

00000baa <__divsf3x>:
 baa:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_split3>
 bae:	68 f3       	brcs	.-38     	; 0xb8a <__divsf3+0x8>

00000bb0 <__divsf3_pse>:
 bb0:	99 23       	and	r25, r25
 bb2:	b1 f3       	breq	.-20     	; 0xba0 <__divsf3+0x1e>
 bb4:	55 23       	and	r21, r21
 bb6:	91 f3       	breq	.-28     	; 0xb9c <__divsf3+0x1a>
 bb8:	95 1b       	sub	r25, r21
 bba:	55 0b       	sbc	r21, r21
 bbc:	bb 27       	eor	r27, r27
 bbe:	aa 27       	eor	r26, r26
 bc0:	62 17       	cp	r22, r18
 bc2:	73 07       	cpc	r23, r19
 bc4:	84 07       	cpc	r24, r20
 bc6:	38 f0       	brcs	.+14     	; 0xbd6 <__divsf3_pse+0x26>
 bc8:	9f 5f       	subi	r25, 0xFF	; 255
 bca:	5f 4f       	sbci	r21, 0xFF	; 255
 bcc:	22 0f       	add	r18, r18
 bce:	33 1f       	adc	r19, r19
 bd0:	44 1f       	adc	r20, r20
 bd2:	aa 1f       	adc	r26, r26
 bd4:	a9 f3       	breq	.-22     	; 0xbc0 <__divsf3_pse+0x10>
 bd6:	35 d0       	rcall	.+106    	; 0xc42 <__divsf3_pse+0x92>
 bd8:	0e 2e       	mov	r0, r30
 bda:	3a f0       	brmi	.+14     	; 0xbea <__divsf3_pse+0x3a>
 bdc:	e0 e8       	ldi	r30, 0x80	; 128
 bde:	32 d0       	rcall	.+100    	; 0xc44 <__divsf3_pse+0x94>
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	e6 95       	lsr	r30
 be6:	00 1c       	adc	r0, r0
 be8:	ca f7       	brpl	.-14     	; 0xbdc <__divsf3_pse+0x2c>
 bea:	2b d0       	rcall	.+86     	; 0xc42 <__divsf3_pse+0x92>
 bec:	fe 2f       	mov	r31, r30
 bee:	29 d0       	rcall	.+82     	; 0xc42 <__divsf3_pse+0x92>
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	bb 1f       	adc	r27, r27
 bf8:	26 17       	cp	r18, r22
 bfa:	37 07       	cpc	r19, r23
 bfc:	48 07       	cpc	r20, r24
 bfe:	ab 07       	cpc	r26, r27
 c00:	b0 e8       	ldi	r27, 0x80	; 128
 c02:	09 f0       	breq	.+2      	; 0xc06 <__divsf3_pse+0x56>
 c04:	bb 0b       	sbc	r27, r27
 c06:	80 2d       	mov	r24, r0
 c08:	bf 01       	movw	r22, r30
 c0a:	ff 27       	eor	r31, r31
 c0c:	93 58       	subi	r25, 0x83	; 131
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255
 c10:	3a f0       	brmi	.+14     	; 0xc20 <__divsf3_pse+0x70>
 c12:	9e 3f       	cpi	r25, 0xFE	; 254
 c14:	51 05       	cpc	r21, r1
 c16:	78 f0       	brcs	.+30     	; 0xc36 <__divsf3_pse+0x86>
 c18:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_inf>
 c1c:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_szero>
 c20:	5f 3f       	cpi	r21, 0xFF	; 255
 c22:	e4 f3       	brlt	.-8      	; 0xc1c <__divsf3_pse+0x6c>
 c24:	98 3e       	cpi	r25, 0xE8	; 232
 c26:	d4 f3       	brlt	.-12     	; 0xc1c <__divsf3_pse+0x6c>
 c28:	86 95       	lsr	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	f7 95       	ror	r31
 c32:	9f 5f       	subi	r25, 0xFF	; 255
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__divsf3_pse+0x78>
 c36:	88 0f       	add	r24, r24
 c38:	91 1d       	adc	r25, r1
 c3a:	96 95       	lsr	r25
 c3c:	87 95       	ror	r24
 c3e:	97 f9       	bld	r25, 7
 c40:	08 95       	ret
 c42:	e1 e0       	ldi	r30, 0x01	; 1
 c44:	66 0f       	add	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	bb 1f       	adc	r27, r27
 c4c:	62 17       	cp	r22, r18
 c4e:	73 07       	cpc	r23, r19
 c50:	84 07       	cpc	r24, r20
 c52:	ba 07       	cpc	r27, r26
 c54:	20 f0       	brcs	.+8      	; 0xc5e <__divsf3_pse+0xae>
 c56:	62 1b       	sub	r22, r18
 c58:	73 0b       	sbc	r23, r19
 c5a:	84 0b       	sbc	r24, r20
 c5c:	ba 0b       	sbc	r27, r26
 c5e:	ee 1f       	adc	r30, r30
 c60:	88 f7       	brcc	.-30     	; 0xc44 <__divsf3_pse+0x94>
 c62:	e0 95       	com	r30
 c64:	08 95       	ret

00000c66 <__fp_cmp>:
 c66:	99 0f       	add	r25, r25
 c68:	00 08       	sbc	r0, r0
 c6a:	55 0f       	add	r21, r21
 c6c:	aa 0b       	sbc	r26, r26
 c6e:	e0 e8       	ldi	r30, 0x80	; 128
 c70:	fe ef       	ldi	r31, 0xFE	; 254
 c72:	16 16       	cp	r1, r22
 c74:	17 06       	cpc	r1, r23
 c76:	e8 07       	cpc	r30, r24
 c78:	f9 07       	cpc	r31, r25
 c7a:	c0 f0       	brcs	.+48     	; 0xcac <__fp_cmp+0x46>
 c7c:	12 16       	cp	r1, r18
 c7e:	13 06       	cpc	r1, r19
 c80:	e4 07       	cpc	r30, r20
 c82:	f5 07       	cpc	r31, r21
 c84:	98 f0       	brcs	.+38     	; 0xcac <__fp_cmp+0x46>
 c86:	62 1b       	sub	r22, r18
 c88:	73 0b       	sbc	r23, r19
 c8a:	84 0b       	sbc	r24, r20
 c8c:	95 0b       	sbc	r25, r21
 c8e:	39 f4       	brne	.+14     	; 0xc9e <__fp_cmp+0x38>
 c90:	0a 26       	eor	r0, r26
 c92:	61 f0       	breq	.+24     	; 0xcac <__fp_cmp+0x46>
 c94:	23 2b       	or	r18, r19
 c96:	24 2b       	or	r18, r20
 c98:	25 2b       	or	r18, r21
 c9a:	21 f4       	brne	.+8      	; 0xca4 <__fp_cmp+0x3e>
 c9c:	08 95       	ret
 c9e:	0a 26       	eor	r0, r26
 ca0:	09 f4       	brne	.+2      	; 0xca4 <__fp_cmp+0x3e>
 ca2:	a1 40       	sbci	r26, 0x01	; 1
 ca4:	a6 95       	lsr	r26
 ca6:	8f ef       	ldi	r24, 0xFF	; 255
 ca8:	81 1d       	adc	r24, r1
 caa:	81 1d       	adc	r24, r1
 cac:	08 95       	ret

00000cae <__fp_inf>:
 cae:	97 f9       	bld	r25, 7
 cb0:	9f 67       	ori	r25, 0x7F	; 127
 cb2:	80 e8       	ldi	r24, 0x80	; 128
 cb4:	70 e0       	ldi	r23, 0x00	; 0
 cb6:	60 e0       	ldi	r22, 0x00	; 0
 cb8:	08 95       	ret

00000cba <__fp_nan>:
 cba:	9f ef       	ldi	r25, 0xFF	; 255
 cbc:	80 ec       	ldi	r24, 0xC0	; 192
 cbe:	08 95       	ret

00000cc0 <__fp_pscA>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	16 16       	cp	r1, r22
 cc6:	17 06       	cpc	r1, r23
 cc8:	18 06       	cpc	r1, r24
 cca:	09 06       	cpc	r0, r25
 ccc:	08 95       	ret

00000cce <__fp_pscB>:
 cce:	00 24       	eor	r0, r0
 cd0:	0a 94       	dec	r0
 cd2:	12 16       	cp	r1, r18
 cd4:	13 06       	cpc	r1, r19
 cd6:	14 06       	cpc	r1, r20
 cd8:	05 06       	cpc	r0, r21
 cda:	08 95       	ret

00000cdc <__fp_round>:
 cdc:	09 2e       	mov	r0, r25
 cde:	03 94       	inc	r0
 ce0:	00 0c       	add	r0, r0
 ce2:	11 f4       	brne	.+4      	; 0xce8 <__fp_round+0xc>
 ce4:	88 23       	and	r24, r24
 ce6:	52 f0       	brmi	.+20     	; 0xcfc <__fp_round+0x20>
 ce8:	bb 0f       	add	r27, r27
 cea:	40 f4       	brcc	.+16     	; 0xcfc <__fp_round+0x20>
 cec:	bf 2b       	or	r27, r31
 cee:	11 f4       	brne	.+4      	; 0xcf4 <__fp_round+0x18>
 cf0:	60 ff       	sbrs	r22, 0
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__fp_round+0x20>
 cf4:	6f 5f       	subi	r22, 0xFF	; 255
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__fp_split3>:
 cfe:	57 fd       	sbrc	r21, 7
 d00:	90 58       	subi	r25, 0x80	; 128
 d02:	44 0f       	add	r20, r20
 d04:	55 1f       	adc	r21, r21
 d06:	59 f0       	breq	.+22     	; 0xd1e <__fp_splitA+0x10>
 d08:	5f 3f       	cpi	r21, 0xFF	; 255
 d0a:	71 f0       	breq	.+28     	; 0xd28 <__fp_splitA+0x1a>
 d0c:	47 95       	ror	r20

00000d0e <__fp_splitA>:
 d0e:	88 0f       	add	r24, r24
 d10:	97 fb       	bst	r25, 7
 d12:	99 1f       	adc	r25, r25
 d14:	61 f0       	breq	.+24     	; 0xd2e <__fp_splitA+0x20>
 d16:	9f 3f       	cpi	r25, 0xFF	; 255
 d18:	79 f0       	breq	.+30     	; 0xd38 <__fp_splitA+0x2a>
 d1a:	87 95       	ror	r24
 d1c:	08 95       	ret
 d1e:	12 16       	cp	r1, r18
 d20:	13 06       	cpc	r1, r19
 d22:	14 06       	cpc	r1, r20
 d24:	55 1f       	adc	r21, r21
 d26:	f2 cf       	rjmp	.-28     	; 0xd0c <__fp_split3+0xe>
 d28:	46 95       	lsr	r20
 d2a:	f1 df       	rcall	.-30     	; 0xd0e <__fp_splitA>
 d2c:	08 c0       	rjmp	.+16     	; 0xd3e <__fp_splitA+0x30>
 d2e:	16 16       	cp	r1, r22
 d30:	17 06       	cpc	r1, r23
 d32:	18 06       	cpc	r1, r24
 d34:	99 1f       	adc	r25, r25
 d36:	f1 cf       	rjmp	.-30     	; 0xd1a <__fp_splitA+0xc>
 d38:	86 95       	lsr	r24
 d3a:	71 05       	cpc	r23, r1
 d3c:	61 05       	cpc	r22, r1
 d3e:	08 94       	sec
 d40:	08 95       	ret

00000d42 <__fp_zero>:
 d42:	e8 94       	clt

00000d44 <__fp_szero>:
 d44:	bb 27       	eor	r27, r27
 d46:	66 27       	eor	r22, r22
 d48:	77 27       	eor	r23, r23
 d4a:	cb 01       	movw	r24, r22
 d4c:	97 f9       	bld	r25, 7
 d4e:	08 95       	ret

00000d50 <__gesf2>:
 d50:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_cmp>
 d54:	08 f4       	brcc	.+2      	; 0xd58 <__gesf2+0x8>
 d56:	8f ef       	ldi	r24, 0xFF	; 255
 d58:	08 95       	ret

00000d5a <_exit>:
 d5a:	f8 94       	cli

00000d5c <__stop_program>:
 d5c:	ff cf       	rjmp	.-2      	; 0xd5c <__stop_program>
