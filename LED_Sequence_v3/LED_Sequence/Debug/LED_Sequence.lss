
LED_Sequence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000d64  00000df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  0080006a  00000e02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001766  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a10  00000000  00000000  0000274e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd7  00000000  00000000  0000315e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e2  00000000  00000000  00004264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b72  00000000  00000000  00004946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	10 04       	cpc	r1, r0
  56:	1a 04       	cpc	r1, r10
  58:	24 04       	cpc	r2, r4
  5a:	2e 04       	cpc	r2, r14
  5c:	38 04       	cpc	r3, r8
  5e:	42 04       	cpc	r4, r2
  60:	4c 04       	cpc	r4, r12
  62:	56 04       	cpc	r5, r6

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e6       	ldi	r30, 0x64	; 100
  78:	fd e0       	ldi	r31, 0x0D	; 13
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	aa e6       	ldi	r26, 0x6A	; 106
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	aa 37       	cpi	r26, 0x7A	; 122
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  9a:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <SetFlag>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
void SetFlag(){
	
	if(flag <7){
  a2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	20 f4       	brcc	.+8      	; 0xb2 <SetFlag+0x10>
		
		flag++;
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flag>
  b0:	08 95       	ret
		
		}else{
		
		flag = 0;
  b2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
  b6:	08 95       	ret

000000b8 <SetDelay>:
	}
}

void SetDelay(){
	
	flag2++;
  b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flag2>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <flag2>
	switch(flag2){
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	19 f1       	breq	.+70     	; 0x10c <SetDelay+0x54>
  c6:	18 f4       	brcc	.+6      	; 0xce <SetDelay+0x16>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	39 f0       	breq	.+14     	; 0xda <SetDelay+0x22>
  cc:	66 c0       	rjmp	.+204    	; 0x19a <SetDelay+0xe2>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	b1 f1       	breq	.+108    	; 0x13e <SetDelay+0x86>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	09 f4       	brne	.+2      	; 0xd8 <SetDelay+0x20>
  d6:	48 c0       	rjmp	.+144    	; 0x168 <SetDelay+0xb0>
  d8:	60 c0       	rjmp	.+192    	; 0x19a <SetDelay+0xe2>
		
		
		case 1 :
		delay_on=200;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	a8 e4       	ldi	r26, 0x48	; 72
  e0:	b3 e4       	ldi	r27, 0x43	; 67
  e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
  e6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
  ea:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
  ee:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=800;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	a8 e4       	ldi	r26, 0x48	; 72
  f8:	b4 e4       	ldi	r27, 0x44	; 68
  fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 102:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 106:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		break;
 10a:	08 95       	ret
		
		case 2 :
		delay_on=300;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	a6 e9       	ldi	r26, 0x96	; 150
 112:	b3 e4       	ldi	r27, 0x43	; 67
 114:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 118:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 11c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 120:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=700;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	af e2       	ldi	r26, 0x2F	; 47
 12a:	b4 e4       	ldi	r27, 0x44	; 68
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 134:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 138:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		break;
 13c:	08 95       	ret
		
		case 3 :
		delay_on=500;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	aa ef       	ldi	r26, 0xFA	; 250
 144:	b3 e4       	ldi	r27, 0x43	; 67
 146:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 14a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 14e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 152:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=500;
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 162:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		break;
 166:	08 95       	ret
		
		case 4 :
		delay_on=800;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	a8 e4       	ldi	r26, 0x48	; 72
 16e:	b4 e4       	ldi	r27, 0x44	; 68
 170:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 174:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 178:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 17c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=200;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	a8 e4       	ldi	r26, 0x48	; 72
 186:	b3 e4       	ldi	r27, 0x43	; 67
 188:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 190:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 194:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		break;
 198:	08 95       	ret
		
		
		default:
		flag2 = 0 ;
 19a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <flag2>
		delay_on=100;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a8 ec       	ldi	r26, 0xC8	; 200
 1a4:	b2 e4       	ldi	r27, 0x42	; 66
 1a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 1aa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 1ae:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 1b2:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=900;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	a1 e6       	ldi	r26, 0x61	; 97
 1bc:	b4 e4       	ldi	r27, 0x44	; 68
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ca:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1ce:	08 95       	ret

000001d0 <APP_init>:
	
}
void APP_init(void)
{
	
	LED_init(portb, pin0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 82 02 	call	0x504	; 0x504 <LED_init>
	LED_init(portb, pin1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 82 02 	call	0x504	; 0x504 <LED_init>
	LED_init(portb, pin2);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 82 02 	call	0x504	; 0x504 <LED_init>
	LED_init(portb, pin3);
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 82 02 	call	0x504	; 0x504 <LED_init>

	button_init(portd, pin2);
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 75 02 	call	0x4ea	; 0x4ea <button_init>
	button_init(portd, pin3);
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 75 02 	call	0x4ea	; 0x4ea <button_init>
	
	 // INTERRUPT
	 sei();
 200:	78 94       	sei
	 error_value= ExtInt_init();
 202:	0e 94 b6 03 	call	0x76c	; 0x76c <ExtInt_init>
 206:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <error_value>
	 error_value2=INT0_SetCallback(SetFlag);
 20a:	81 e5       	ldi	r24, 0x51	; 81
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 cb 03 	call	0x796	; 0x796 <INT0_SetCallback>
 212:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	 INT1_SetCallback(SetDelay);
 216:	8c e5       	ldi	r24, 0x5C	; 92
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <INT1_SetCallback>
 21e:	08 95       	ret

00000220 <APP_start>:
}


void APP_start(void){
	if (flag == 0){
 220:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
 224:	81 11       	cpse	r24, r1
 226:	11 c0       	rjmp	.+34     	; 0x24a <APP_start+0x2a>
		LED_off(portb,pin0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
 248:	08 95       	ret

	}
	else if(flag == 1){
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	41 f5       	brne	.+80     	; 0x29e <APP_start+0x7e>
		LED_on(portb,pin0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 254:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 258:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 25c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 260:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 264:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 270:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 274:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 27c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 280:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin1);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
 29c:	08 95       	ret
		
		
		}else if (flag == 2){
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	69 f5       	brne	.+90     	; 0x2fc <APP_start+0xdc>
		LED_on(portb,pin0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 2b2:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 2b6:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 2ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 2be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 2c2:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin0);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 2d6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2da:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2e6:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		
		LED_off(portb,pin2);
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
 2fa:	08 95       	ret
		
		
		}else if (flag == 3){
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	89 f5       	brne	.+98     	; 0x362 <APP_start+0x142>
		LED_on(portb,pin0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin1);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin2);
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 318:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 31c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 320:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 324:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 328:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 344:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 348:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 34c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 350:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 354:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin3);
 358:	63 e0       	ldi	r22, 0x03	; 3
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
 360:	08 95       	ret
		
		
		}else if (flag == 4){
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	a9 f5       	brne	.+106    	; 0x3d0 <APP_start+0x1b0>
		LED_on(portb,pin0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin1);
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin2);
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin3);
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 386:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 38a:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 38e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 392:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 396:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 3aa:	62 e0       	ldi	r22, 0x02	; 2
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 3ba:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3be:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3c6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3ca:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
 3ce:	08 95       	ret
		}else if (flag == 5){
 3d0:	85 30       	cpi	r24, 0x05	; 5
 3d2:	89 f5       	brne	.+98     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		LED_off(portb,pin0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		
		LED_on(portb,pin1);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin2);
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin3);
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 3f4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 3f8:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 3fc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 400:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 404:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 420:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 424:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 428:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 42c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 430:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
 434:	08 95       	ret
		
		}else if (flag == 6){
 436:	86 30       	cpi	r24, 0x06	; 6
 438:	69 f5       	brne	.+90     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
		LED_off(portb,pin0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		
		LED_on(portb,pin2);
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		LED_on(portb,pin3);
 452:	63 e0       	ldi	r22, 0x03	; 3
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 45a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 45e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 462:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 466:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 46a:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin2);
 46e:	62 e0       	ldi	r22, 0x02	; 2
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin3);
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 47e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 482:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 486:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 48a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 48e:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
 492:	08 95       	ret
		
	}
	else if (flag == 7){
 494:	87 30       	cpi	r24, 0x07	; 7
 496:	41 f5       	brne	.+80     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
		LED_off(portb,pin0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin1);
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_off(portb,pin2);
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		LED_on(portb,pin3);
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 4b8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 4bc:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 4c0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 4c4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 4c8:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
		LED_off(portb,pin3);
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 9c 02 	call	0x538	; 0x538 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 4d4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4e4:	0e 94 c2 04 	call	0x984	; 0x984 <TIMER_0_DELAY_MS>
 4e8:	08 95       	ret

000004ea <button_init>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
EN_return button_init(EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	38 f4       	brcc	.+14     	; 0x4fc <button_init+0x12>
 4ee:	68 30       	cpi	r22, 0x08	; 8
 4f0:	38 f4       	brcc	.+14     	; 0x500 <button_init+0x16>
		return NOT_OK;
	}
	DIO_init(port,pin,INPUT);
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
	return OK;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
EN_return button_init(EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret
 500:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_init(port,pin,INPUT);
	return OK;
}
 502:	08 95       	ret

00000504 <LED_init>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
EN_return LED_init (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 504:	84 30       	cpi	r24, 0x04	; 4
 506:	38 f4       	brcc	.+14     	; 0x516 <LED_init+0x12>
 508:	68 30       	cpi	r22, 0x08	; 8
 50a:	38 f4       	brcc	.+14     	; 0x51a <LED_init+0x16>
		return NOT_OK;
	}
	DIO_init(port,pin,OUTPUT);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_init>
	return OK;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
EN_return LED_init (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	08 95       	ret
 51a:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_init(port,pin,OUTPUT);
	return OK;
}
 51c:	08 95       	ret

0000051e <LED_on>:

EN_return LED_on (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	38 f4       	brcc	.+14     	; 0x530 <LED_on+0x12>
 522:	68 30       	cpi	r22, 0x08	; 8
 524:	38 f4       	brcc	.+14     	; 0x534 <LED_on+0x16>
		return NOT_OK;
	}
	DIO_write(port,pin,HIGH);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write>
	return OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret
}

EN_return LED_on (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
 534:	81 e0       	ldi	r24, 0x01	; 1
	}
	DIO_write(port,pin,HIGH);
	return OK;
}
 536:	08 95       	ret

00000538 <LED_off>:

EN_return LED_off (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 538:	84 30       	cpi	r24, 0x04	; 4
 53a:	38 f4       	brcc	.+14     	; 0x54a <LED_off+0x12>
 53c:	68 30       	cpi	r22, 0x08	; 8
 53e:	38 f4       	brcc	.+14     	; 0x54e <LED_off+0x16>
		return NOT_OK;	
	}
		DIO_write(port,pin,LOW);
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	0e 94 33 03 	call	0x666	; 0x666 <DIO_write>
		return OK;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
}

EN_return LED_off (EN_ports port, EN_pins pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;	
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret
 54e:	81 e0       	ldi	r24, 0x01	; 1
	}
		DIO_write(port,pin,LOW);
		return OK;
}
 550:	08 95       	ret

00000552 <main>:

#include "Application/app.h"

int main(void)
{
	APP_init();
 552:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <APP_init>
	
	while (1){
	APP_start();
 556:	0e 94 10 01 	call	0x220	; 0x220 <APP_start>
 55a:	fd cf       	rjmp	.-6      	; 0x556 <main+0x4>

0000055c <DIO_init>:
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
EN_return DIO_init (EN_ports port, EN_pins pin, EN_direction direction)
{
	switch (port)
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	21 f1       	breq	.+72     	; 0x5a8 <DIO_init+0x4c>
 560:	30 f0       	brcs	.+12     	; 0x56e <DIO_init+0x12>
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	f1 f1       	breq	.+124    	; 0x5e2 <DIO_init+0x86>
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	09 f4       	brne	.+2      	; 0x56c <DIO_init+0x10>
 56a:	57 c0       	rjmp	.+174    	; 0x61a <DIO_init+0xbe>
 56c:	72 c0       	rjmp	.+228    	; 0x652 <DIO_init+0xf6>
	{
//PORTA
		case porta :
		if(direction == INPUT){
 56e:	41 11       	cpse	r20, r1
 570:	0c c0       	rjmp	.+24     	; 0x58a <DIO_init+0x2e>
			RESET_BIT(DDRA,pin);
 572:	2a b3       	in	r18, 0x1a	; 26
 574:	8e ef       	ldi	r24, 0xFE	; 254
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_init+0x22>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_init+0x1e>
 582:	82 23       	and	r24, r18
 584:	8a bb       	out	0x1a, r24	; 26
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
//PORTA
		case porta :
		if(direction == INPUT){
			RESET_BIT(DDRA,pin);
		}
		else if(direction == OUTPUT){
 58a:	41 30       	cpi	r20, 0x01	; 1
 58c:	09 f0       	breq	.+2      	; 0x590 <DIO_init+0x34>
 58e:	63 c0       	rjmp	.+198    	; 0x656 <DIO_init+0xfa>
			SET_BIT(DDRA, pin);
 590:	2a b3       	in	r18, 0x1a	; 26
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_init+0x40>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_init+0x3c>
 5a0:	82 2b       	or	r24, r18
 5a2:	8a bb       	out	0x1a, r24	; 26
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
		}
		else{return NOT_OK;}
		break;
//PORTB
				case portb :
				if(direction == INPUT){
 5a8:	41 11       	cpse	r20, r1
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <DIO_init+0x68>
					RESET_BIT(DDRB,pin);
 5ac:	27 b3       	in	r18, 0x17	; 23
 5ae:	8e ef       	ldi	r24, 0xFE	; 254
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_init+0x5c>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_init+0x58>
 5bc:	82 23       	and	r24, r18
 5be:	87 bb       	out	0x17, r24	; 23
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
//PORTB
				case portb :
				if(direction == INPUT){
					RESET_BIT(DDRB,pin);
				}
				else if(direction == OUTPUT){
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	09 f0       	breq	.+2      	; 0x5ca <DIO_init+0x6e>
 5c8:	48 c0       	rjmp	.+144    	; 0x65a <DIO_init+0xfe>
					SET_BIT(DDRB, pin);
 5ca:	27 b3       	in	r18, 0x17	; 23
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_init+0x7a>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_init+0x76>
 5da:	82 2b       	or	r24, r18
 5dc:	87 bb       	out	0x17, r24	; 23
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	08 95       	ret
				}
				else{return NOT_OK;}
				break;
//PORTC
						case portc :
						if(direction == INPUT){
 5e2:	41 11       	cpse	r20, r1
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <DIO_init+0xa2>
							RESET_BIT(DDRC,pin);
 5e6:	24 b3       	in	r18, 0x14	; 20
 5e8:	8e ef       	ldi	r24, 0xFE	; 254
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_init+0x96>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_init+0x92>
 5f6:	82 23       	and	r24, r18
 5f8:	84 bb       	out	0x14, r24	; 20
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
//PORTC
						case portc :
						if(direction == INPUT){
							RESET_BIT(DDRC,pin);
						}
						else if(direction == OUTPUT){
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	71 f5       	brne	.+92     	; 0x65e <DIO_init+0x102>
							SET_BIT(DDRC, pin);
 602:	24 b3       	in	r18, 0x14	; 20
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_init+0xb2>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_init+0xae>
 612:	82 2b       	or	r24, r18
 614:	84 bb       	out	0x14, r24	; 20
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	08 95       	ret
						}
						else{return NOT_OK;}
						break;
//PORTD
									case portd :
									if(direction == INPUT){
 61a:	41 11       	cpse	r20, r1
 61c:	0c c0       	rjmp	.+24     	; 0x636 <DIO_init+0xda>
										RESET_BIT(DDRD,pin);
 61e:	21 b3       	in	r18, 0x11	; 17
 620:	8e ef       	ldi	r24, 0xFE	; 254
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_init+0xce>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_init+0xca>
 62e:	82 23       	and	r24, r18
 630:	81 bb       	out	0x11, r24	; 17
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
//PORTD
									case portd :
									if(direction == INPUT){
										RESET_BIT(DDRD,pin);
									}
									else if(direction == OUTPUT){
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	a1 f4       	brne	.+40     	; 0x662 <DIO_init+0x106>
										SET_BIT(DDRD, pin);
 63a:	21 b3       	in	r18, 0x11	; 17
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_init+0xea>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_init+0xe6>
 64a:	82 2b       	or	r24, r18
 64c:	81 bb       	out	0x11, r24	; 17
									}
									else{return NOT_OK;}
									break;
	}
	return OK;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
			RESET_BIT(DDRA,pin);
		}
		else if(direction == OUTPUT){
			SET_BIT(DDRA, pin);
		}
		else{return NOT_OK;}
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
					RESET_BIT(DDRB,pin);
				}
				else if(direction == OUTPUT){
					SET_BIT(DDRB, pin);
				}
				else{return NOT_OK;}
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
							RESET_BIT(DDRC,pin);
						}
						else if(direction == OUTPUT){
							SET_BIT(DDRC, pin);
						}
						else{return NOT_OK;}
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
										RESET_BIT(DDRD,pin);
									}
									else if(direction == OUTPUT){
										SET_BIT(DDRD, pin);
									}
									else{return NOT_OK;}
 662:	81 e0       	ldi	r24, 0x01	; 1
									break;
	}
	return OK;
}
 664:	08 95       	ret

00000666 <DIO_write>:

//writing function
EN_return DIO_write (EN_ports port, EN_pins pin, EN_state state)
{
	switch(port){
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	19 f1       	breq	.+70     	; 0x6b0 <DIO_write+0x4a>
 66a:	30 f0       	brcs	.+12     	; 0x678 <DIO_write+0x12>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	e1 f1       	breq	.+120    	; 0x6e8 <DIO_write+0x82>
 670:	83 30       	cpi	r24, 0x03	; 3
 672:	09 f4       	brne	.+2      	; 0x676 <DIO_write+0x10>
 674:	55 c0       	rjmp	.+170    	; 0x720 <DIO_write+0xba>
 676:	70 c0       	rjmp	.+224    	; 0x758 <DIO_write+0xf2>
//PORTA
		case porta :
		if(state == HIGH){
 678:	41 30       	cpi	r20, 0x01	; 1
 67a:	61 f4       	brne	.+24     	; 0x694 <DIO_write+0x2e>
			SET_BIT(PORTA, pin);
 67c:	2b b3       	in	r18, 0x1b	; 27
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_write+0x22>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_write+0x1e>
 68c:	82 2b       	or	r24, r18
 68e:	8b bb       	out	0x1b, r24	; 27
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	08 95       	ret
//PORTA
		case porta :
		if(state == HIGH){
			SET_BIT(PORTA, pin);
		}
		else if (state == LOW){
 694:	41 11       	cpse	r20, r1
 696:	62 c0       	rjmp	.+196    	; 0x75c <DIO_write+0xf6>
			RESET_BIT(PORTA,pin);
 698:	2b b3       	in	r18, 0x1b	; 27
 69a:	8e ef       	ldi	r24, 0xFE	; 254
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_write+0x3e>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_write+0x3a>
 6a8:	82 23       	and	r24, r18
 6aa:	8b bb       	out	0x1b, r24	; 27
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	08 95       	ret
		}
		else{return NOT_OK;}
		break;
//PORTB
				case portb :
				if(state == HIGH){
 6b0:	41 30       	cpi	r20, 0x01	; 1
 6b2:	61 f4       	brne	.+24     	; 0x6cc <DIO_write+0x66>
					SET_BIT(PORTB, pin);
 6b4:	28 b3       	in	r18, 0x18	; 24
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_write+0x5a>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	6a 95       	dec	r22
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_write+0x56>
 6c4:	82 2b       	or	r24, r18
 6c6:	88 bb       	out	0x18, r24	; 24
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	08 95       	ret
//PORTB
				case portb :
				if(state == HIGH){
					SET_BIT(PORTB, pin);
				}
				else if (state == LOW){
 6cc:	41 11       	cpse	r20, r1
 6ce:	48 c0       	rjmp	.+144    	; 0x760 <DIO_write+0xfa>
					RESET_BIT(PORTB,pin);
 6d0:	28 b3       	in	r18, 0x18	; 24
 6d2:	8e ef       	ldi	r24, 0xFE	; 254
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_write+0x76>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_write+0x72>
 6e0:	82 23       	and	r24, r18
 6e2:	88 bb       	out	0x18, r24	; 24
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	08 95       	ret
				}
				else{return NOT_OK;}
				break;
//PORTC
						case portc :
						if(state == HIGH){
 6e8:	41 30       	cpi	r20, 0x01	; 1
 6ea:	61 f4       	brne	.+24     	; 0x704 <DIO_write+0x9e>
							SET_BIT(PORTC, pin);
 6ec:	25 b3       	in	r18, 0x15	; 21
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_write+0x92>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_write+0x8e>
 6fc:	82 2b       	or	r24, r18
 6fe:	85 bb       	out	0x15, r24	; 21
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
//PORTC
						case portc :
						if(state == HIGH){
							SET_BIT(PORTC, pin);
						}
						else if (state == LOW){
 704:	41 11       	cpse	r20, r1
 706:	2e c0       	rjmp	.+92     	; 0x764 <DIO_write+0xfe>
							RESET_BIT(PORTC,pin);
 708:	25 b3       	in	r18, 0x15	; 21
 70a:	8e ef       	ldi	r24, 0xFE	; 254
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_write+0xae>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_write+0xaa>
 718:	82 23       	and	r24, r18
 71a:	85 bb       	out	0x15, r24	; 21
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
						}
						else{return NOT_OK;}
						break;
//PORTD
								case portd :
								if(state == HIGH){
 720:	41 30       	cpi	r20, 0x01	; 1
 722:	61 f4       	brne	.+24     	; 0x73c <DIO_write+0xd6>
									SET_BIT(PORTD, pin);
 724:	22 b3       	in	r18, 0x12	; 18
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_write+0xca>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_write+0xc6>
 734:	82 2b       	or	r24, r18
 736:	82 bb       	out	0x12, r24	; 18
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	08 95       	ret
//PORTD
								case portd :
								if(state == HIGH){
									SET_BIT(PORTD, pin);
								}
								else if (state == LOW){
 73c:	41 11       	cpse	r20, r1
 73e:	14 c0       	rjmp	.+40     	; 0x768 <DIO_write+0x102>
									RESET_BIT(PORTD,pin);
 740:	22 b3       	in	r18, 0x12	; 18
 742:	8e ef       	ldi	r24, 0xFE	; 254
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_write+0xe6>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_write+0xe2>
 750:	82 23       	and	r24, r18
 752:	82 bb       	out	0x12, r24	; 18
								}
								else{return NOT_OK;}
								break;
		}
	return OK;
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	08 95       	ret
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
			SET_BIT(PORTA, pin);
		}
		else if (state == LOW){
			RESET_BIT(PORTA,pin);
		}
		else{return NOT_OK;}
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	08 95       	ret
					SET_BIT(PORTB, pin);
				}
				else if (state == LOW){
					RESET_BIT(PORTB,pin);
				}
				else{return NOT_OK;}
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret
							SET_BIT(PORTC, pin);
						}
						else if (state == LOW){
							RESET_BIT(PORTC,pin);
						}
						else{return NOT_OK;}
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	08 95       	ret
									SET_BIT(PORTD, pin);
								}
								else if (state == LOW){
									RESET_BIT(PORTD,pin);
								}
								else{return NOT_OK;}
 768:	81 e0       	ldi	r24, 0x01	; 1
								break;
		}
	return OK;
}
 76a:	08 95       	ret

0000076c <ExtInt_init>:
#elif INT0_SENSE_MODE == ANY_LOGIC
			SET_BIT(MCUCR,ISC00);
			RESET_BIT(MCUCR,ISC01);
	
#elif INT0_SENSE_MODE == FALLING_EDGE
			SET_BIT(MCUCR,ISC01);
 76c:	85 b7       	in	r24, 0x35	; 53
 76e:	82 60       	ori	r24, 0x02	; 2
 770:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,ISC00);
 772:	85 b7       	in	r24, 0x35	; 53
 774:	8e 7f       	andi	r24, 0xFE	; 254
 776:	85 bf       	out	0x35, r24	; 53
	error_status = WRONG_SENSE_MODE;
	
#endif 

//ENABLE INTERRUPT_0
SET_BIT(GICR,INT_0);
 778:	8b b7       	in	r24, 0x3b	; 59
 77a:	80 64       	ori	r24, 0x40	; 64
 77c:	8b bf       	out	0x3b, r24	; 59
#elif INT1_SENSE_MODE == ANY_LOGIC
	SET_BIT(MCUCR,ISC10);
	RESET_BIT(MCUCR,ISC11);

#elif INT1_SENSE_MODE == FALLING_EDGE
	SET_BIT(MCUCR,ISC11);
 77e:	85 b7       	in	r24, 0x35	; 53
 780:	88 60       	ori	r24, 0x08	; 8
 782:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR,ISC10);
 784:	85 b7       	in	r24, 0x35	; 53
 786:	88 7f       	andi	r24, 0xF8	; 248
 788:	85 bf       	out	0x35, r24	; 53
error_status = WRONG_SENSE_MODE;

#endif

//ENABLE INTERRUPT_1
SET_BIT(GICR,INT_1);
 78a:	8b b7       	in	r24, 0x3b	; 59
 78c:	80 68       	ori	r24, 0x80	; 128
 78e:	8b bf       	out	0x3b, r24	; 59
#endif



return error_status;
} // END OF ExtInt_init 
 790:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 794:	08 95       	ret

00000796 <INT0_SetCallback>:
/*************************************************/
//				CALLBACK FUNCTIONS
/**************************************************/

// CALLBACK FUNCTION TO INT_0
Ext_intErrorStatus INT0_SetCallback(void(*callback)(void)){
 796:	9c 01       	movw	r18, r24
if(error_status==EXT_INT_OK){
 798:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 79c:	83 30       	cpi	r24, 0x03	; 3
 79e:	49 f4       	brne	.+18     	; 0x7b2 <INT0_SetCallback+0x1c>
	if(callback!=0){
 7a0:	21 15       	cp	r18, r1
 7a2:	31 05       	cpc	r19, r1
 7a4:	29 f0       	breq	.+10     	; 0x7b0 <INT0_SetCallback+0x1a>
			P0_CallbackFunction=callback;
 7a6:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <P0_CallbackFunction+0x1>
 7aa:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <P0_CallbackFunction>
			return EXT_INT_OK;
 7ae:	08 95       	ret
	}else{
		return NULL_POINTE;
 7b0:	82 e0       	ldi	r24, 0x02	; 2
else{
	return error_status;
	
}

}
 7b2:	08 95       	ret

000007b4 <INT1_SetCallback>:


// CALLBACK FUNCTION TO INT_1
Ext_intErrorStatus INT1_SetCallback(void(*callback)(void)){

	P1_CallbackFunction=callback;
 7b4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <P1_CallbackFunction+0x1>
 7b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <P1_CallbackFunction>
}
 7bc:	08 95       	ret

000007be <timer_init>:

void timer_reset()
{
	TCCR0 &= 0x00;
	RESET_BIT(TIFR, 0);
	TCNT0 = 0;
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	69 f0       	breq	.+26     	; 0x7dc <timer_init+0x1e>
 7c2:	28 f0       	brcs	.+10     	; 0x7ce <timer_init+0x10>
 7c4:	82 30       	cpi	r24, 0x02	; 2
 7c6:	c1 f0       	breq	.+48     	; 0x7f8 <timer_init+0x3a>
 7c8:	83 30       	cpi	r24, 0x03	; 3
 7ca:	79 f0       	breq	.+30     	; 0x7ea <timer_init+0x2c>
 7cc:	1b c0       	rjmp	.+54     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	80 78       	andi	r24, 0x80	; 128
 7d2:	83 bf       	out	0x33, r24	; 51
 7d4:	83 b7       	in	r24, 0x33	; 51
 7d6:	80 7f       	andi	r24, 0xF0	; 240
 7d8:	83 bf       	out	0x33, r24	; 51
 7da:	14 c0       	rjmp	.+40     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7dc:	83 b7       	in	r24, 0x33	; 51
 7de:	80 64       	ori	r24, 0x40	; 64
 7e0:	83 bf       	out	0x33, r24	; 51
 7e2:	83 b7       	in	r24, 0x33	; 51
 7e4:	80 7f       	andi	r24, 0xF0	; 240
 7e6:	83 bf       	out	0x33, r24	; 51
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ea:	83 b7       	in	r24, 0x33	; 51
 7ec:	80 78       	andi	r24, 0x80	; 128
 7ee:	83 bf       	out	0x33, r24	; 51
 7f0:	83 b7       	in	r24, 0x33	; 51
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	83 bf       	out	0x33, r24	; 51
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f8:	83 b7       	in	r24, 0x33	; 51
 7fa:	80 64       	ori	r24, 0x40	; 64
 7fc:	83 bf       	out	0x33, r24	; 51
 7fe:	83 b7       	in	r24, 0x33	; 51
 800:	88 60       	ori	r24, 0x08	; 8
 802:	83 bf       	out	0x33, r24	; 51
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret

00000808 <Timer_initialValue>:
 808:	82 bf       	out	0x32, r24	; 50
 80a:	08 95       	ret

0000080c <timer_start>:
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	88 30       	cpi	r24, 0x08	; 8
 810:	91 05       	cpc	r25, r1
 812:	08 f0       	brcs	.+2      	; 0x816 <timer_start+0xa>
 814:	54 c0       	rjmp	.+168    	; 0x8be <__stack+0x5f>
 816:	fc 01       	movw	r30, r24
 818:	e6 5d       	subi	r30, 0xD6	; 214
 81a:	ff 4f       	sbci	r31, 0xFF	; 255
 81c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__tablejump2__>
 820:	83 b7       	in	r24, 0x33	; 51
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	83 bf       	out	0x33, r24	; 51
 826:	83 b7       	in	r24, 0x33	; 51
 828:	8c 7f       	andi	r24, 0xFC	; 252
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	88 7f       	andi	r24, 0xF8	; 248
 830:	83 bf       	out	0x33, r24	; 51
 832:	45 c0       	rjmp	.+138    	; 0x8be <__stack+0x5f>
 834:	83 b7       	in	r24, 0x33	; 51
 836:	81 60       	ori	r24, 0x01	; 1
 838:	83 bf       	out	0x33, r24	; 51
 83a:	83 b7       	in	r24, 0x33	; 51
 83c:	8c 7f       	andi	r24, 0xFC	; 252
 83e:	83 bf       	out	0x33, r24	; 51
 840:	83 b7       	in	r24, 0x33	; 51
 842:	88 7f       	andi	r24, 0xF8	; 248
 844:	83 bf       	out	0x33, r24	; 51
 846:	3b c0       	rjmp	.+118    	; 0x8be <__stack+0x5f>
 848:	83 b7       	in	r24, 0x33	; 51
 84a:	8e 7f       	andi	r24, 0xFE	; 254
 84c:	83 bf       	out	0x33, r24	; 51
 84e:	83 b7       	in	r24, 0x33	; 51
 850:	82 60       	ori	r24, 0x02	; 2
 852:	83 bf       	out	0x33, r24	; 51
 854:	83 b7       	in	r24, 0x33	; 51
 856:	88 7f       	andi	r24, 0xF8	; 248
 858:	83 bf       	out	0x33, r24	; 51
 85a:	31 c0       	rjmp	.+98     	; 0x8be <__stack+0x5f>
 85c:	83 b7       	in	r24, 0x33	; 51
 85e:	81 60       	ori	r24, 0x01	; 1
 860:	83 bf       	out	0x33, r24	; 51
 862:	83 b7       	in	r24, 0x33	; 51
 864:	82 60       	ori	r24, 0x02	; 2
 866:	83 bf       	out	0x33, r24	; 51
 868:	83 b7       	in	r24, 0x33	; 51
 86a:	88 7f       	andi	r24, 0xF8	; 248
 86c:	83 bf       	out	0x33, r24	; 51
 86e:	27 c0       	rjmp	.+78     	; 0x8be <__stack+0x5f>
 870:	83 b7       	in	r24, 0x33	; 51
 872:	8e 7f       	andi	r24, 0xFE	; 254
 874:	83 bf       	out	0x33, r24	; 51
 876:	83 b7       	in	r24, 0x33	; 51
 878:	8c 7f       	andi	r24, 0xFC	; 252
 87a:	83 bf       	out	0x33, r24	; 51
 87c:	83 b7       	in	r24, 0x33	; 51
 87e:	84 60       	ori	r24, 0x04	; 4
 880:	83 bf       	out	0x33, r24	; 51
 882:	1d c0       	rjmp	.+58     	; 0x8be <__stack+0x5f>
 884:	83 b7       	in	r24, 0x33	; 51
 886:	81 60       	ori	r24, 0x01	; 1
 888:	83 bf       	out	0x33, r24	; 51
 88a:	83 b7       	in	r24, 0x33	; 51
 88c:	8c 7f       	andi	r24, 0xFC	; 252
 88e:	83 bf       	out	0x33, r24	; 51
 890:	83 b7       	in	r24, 0x33	; 51
 892:	84 60       	ori	r24, 0x04	; 4
 894:	83 bf       	out	0x33, r24	; 51
 896:	13 c0       	rjmp	.+38     	; 0x8be <__stack+0x5f>
 898:	83 b7       	in	r24, 0x33	; 51
 89a:	8e 7f       	andi	r24, 0xFE	; 254
 89c:	83 bf       	out	0x33, r24	; 51
 89e:	83 b7       	in	r24, 0x33	; 51
 8a0:	82 60       	ori	r24, 0x02	; 2
 8a2:	83 bf       	out	0x33, r24	; 51
 8a4:	83 b7       	in	r24, 0x33	; 51
 8a6:	84 60       	ori	r24, 0x04	; 4
 8a8:	83 bf       	out	0x33, r24	; 51
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <__stack+0x5f>
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	83 bf       	out	0x33, r24	; 51
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	83 bf       	out	0x33, r24	; 51
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	84 60       	ori	r24, 0x04	; 4
 8bc:	83 bf       	out	0x33, r24	; 51
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <TIMER_0_OvfNum>:
}

EN_error_t TIMER_0_OvfNum(double overflow){
 8c2:	8f 92       	push	r8
 8c4:	9f 92       	push	r9
 8c6:	af 92       	push	r10
 8c8:	bf 92       	push	r11
 8ca:	cf 92       	push	r12
 8cc:	df 92       	push	r13
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	4b 01       	movw	r8, r22
 8d4:	5c 01       	movw	r10, r24
	double num_ovf = 0;
	if (overflow > 0)
 8d6:	20 e0       	ldi	r18, 0x00	; 0
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	a9 01       	movw	r20, r18
 8dc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__gesf2>
 8e0:	18 16       	cp	r1, r24
 8e2:	94 f0       	brlt	.+36     	; 0x908 <TIMER_0_OvfNum+0x46>
 8e4:	1d c0       	rjmp	.+58     	; 0x920 <TIMER_0_OvfNum+0x5e>
	{	
		while(num_ovf < overflow){
			while(READ_BIT(TIFR,TOV0)==0);
 8e6:	08 b6       	in	r0, 0x38	; 56
 8e8:	00 fe       	sbrs	r0, 0
 8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <TIMER_0_OvfNum+0x24>
			SET_BIT(TIFR,TOV0);
 8ec:	88 b7       	in	r24, 0x38	; 56
 8ee:	81 60       	ori	r24, 0x01	; 1
 8f0:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	40 e8       	ldi	r20, 0x80	; 128
 8f8:	5f e3       	ldi	r21, 0x3F	; 63
 8fa:	c7 01       	movw	r24, r14
 8fc:	b6 01       	movw	r22, r12
 8fe:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__addsf3>
 902:	6b 01       	movw	r12, r22
 904:	7c 01       	movw	r14, r24
 906:	03 c0       	rjmp	.+6      	; 0x90e <TIMER_0_OvfNum+0x4c>
 908:	c1 2c       	mov	r12, r1
 90a:	d1 2c       	mov	r13, r1
 90c:	76 01       	movw	r14, r12

EN_error_t TIMER_0_OvfNum(double overflow){
	double num_ovf = 0;
	if (overflow > 0)
	{	
		while(num_ovf < overflow){
 90e:	a5 01       	movw	r20, r10
 910:	94 01       	movw	r18, r8
 912:	c7 01       	movw	r24, r14
 914:	b6 01       	movw	r22, r12
 916:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__cmpsf2>
 91a:	88 23       	and	r24, r24
 91c:	24 f3       	brlt	.-56     	; 0x8e6 <TIMER_0_OvfNum+0x24>
 91e:	28 c0       	rjmp	.+80     	; 0x970 <TIMER_0_OvfNum+0xae>
			while(READ_BIT(TIFR,TOV0)==0);
			SET_BIT(TIFR,TOV0);
			num_ovf++;
		}
		num_ovf = 0;
	}else if (overflow <= 0)
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	a9 01       	movw	r20, r18
 926:	c5 01       	movw	r24, r10
 928:	b4 01       	movw	r22, r8
 92a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__cmpsf2>
 92e:	18 16       	cp	r1, r24
 930:	fc f0       	brlt	.+62     	; 0x970 <TIMER_0_OvfNum+0xae>
 932:	11 c0       	rjmp	.+34     	; 0x956 <TIMER_0_OvfNum+0x94>
	{
		overflow = 1 ;
		while(num_ovf<overflow){
			
			while(READ_BIT(TIFR,TOV0)==0);
 934:	08 b6       	in	r0, 0x38	; 56
 936:	00 fe       	sbrs	r0, 0
 938:	fd cf       	rjmp	.-6      	; 0x934 <TIMER_0_OvfNum+0x72>
			SET_BIT(TIFR,TOV0);
 93a:	88 b7       	in	r24, 0x38	; 56
 93c:	81 60       	ori	r24, 0x01	; 1
 93e:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 940:	20 e0       	ldi	r18, 0x00	; 0
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	40 e8       	ldi	r20, 0x80	; 128
 946:	5f e3       	ldi	r21, 0x3F	; 63
 948:	c7 01       	movw	r24, r14
 94a:	b6 01       	movw	r22, r12
 94c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__addsf3>
 950:	6b 01       	movw	r12, r22
 952:	7c 01       	movw	r14, r24
 954:	03 c0       	rjmp	.+6      	; 0x95c <TIMER_0_OvfNum+0x9a>
 956:	c1 2c       	mov	r12, r1
 958:	d1 2c       	mov	r13, r1
 95a:	76 01       	movw	r14, r12
		}
		num_ovf = 0;
	}else if (overflow <= 0)
	{
		overflow = 1 ;
		while(num_ovf<overflow){
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	40 e8       	ldi	r20, 0x80	; 128
 962:	5f e3       	ldi	r21, 0x3F	; 63
 964:	c7 01       	movw	r24, r14
 966:	b6 01       	movw	r22, r12
 968:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__cmpsf2>
 96c:	88 23       	and	r24, r24
 96e:	14 f3       	brlt	.-60     	; 0x934 <TIMER_0_OvfNum+0x72>
			num_ovf++;
		}
		num_ovf = 0;
	}
	return valid;
	}
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	ff 90       	pop	r15
 974:	ef 90       	pop	r14
 976:	df 90       	pop	r13
 978:	cf 90       	pop	r12
 97a:	bf 90       	pop	r11
 97c:	af 90       	pop	r10
 97e:	9f 90       	pop	r9
 980:	8f 90       	pop	r8
 982:	08 95       	ret

00000984 <TIMER_0_DELAY_MS>:
double ovfNum  ;
double t ;
void TIMER_0_DELAY_MS(double time_ms){
	t = time_ms/1000 ;
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	4a e7       	ldi	r20, 0x7A	; 122
 98a:	54 e4       	ldi	r21, 0x44	; 68
 98c:	0e 94 7d 05 	call	0xafa	; 0xafa <__divsf3>
 990:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <t>
 994:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <t+0x1>
 998:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <t+0x2>
 99c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <t+0x3>
	ovfNum = ceil (t / 0.000256) ;
 9a0:	2d eb       	ldi	r18, 0xBD	; 189
 9a2:	37 e3       	ldi	r19, 0x37	; 55
 9a4:	46 e8       	ldi	r20, 0x86	; 134
 9a6:	59 e3       	ldi	r21, 0x39	; 57
 9a8:	0e 94 7d 05 	call	0xafa	; 0xafa <__divsf3>
 9ac:	0e 94 61 05 	call	0xac2	; 0xac2 <ceil>
 9b0:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <ovfNum>
 9b4:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <ovfNum+0x1>
 9b8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <ovfNum+0x2>
 9bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <ovfNum+0x3>
	timer_init(normal);
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	0e 94 df 03 	call	0x7be	; 0x7be <timer_init>
	Timer_initialValue(0);
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	0e 94 04 04 	call	0x808	; 0x808 <Timer_initialValue>
	timer_start(NoPrescaling);
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	0e 94 06 04 	call	0x80c	; 0x80c <timer_start>
	TIMER_0_OvfNum(ovfNum);
 9d2:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <ovfNum>
 9d6:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <ovfNum+0x1>
 9da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <ovfNum+0x2>
 9de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <ovfNum+0x3>
 9e2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <TIMER_0_OvfNum>
 9e6:	08 95       	ret

000009e8 <__subsf3>:
 9e8:	50 58       	subi	r21, 0x80	; 128

000009ea <__addsf3>:
 9ea:	bb 27       	eor	r27, r27
 9ec:	aa 27       	eor	r26, r26
 9ee:	0e 94 0c 05 	call	0xa18	; 0xa18 <__addsf3x>
 9f2:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_round>
 9f6:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_pscA>
 9fa:	38 f0       	brcs	.+14     	; 0xa0a <__addsf3+0x20>
 9fc:	0e 94 4c 06 	call	0xc98	; 0xc98 <__fp_pscB>
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__addsf3+0x20>
 a02:	39 f4       	brne	.+14     	; 0xa12 <__addsf3+0x28>
 a04:	9f 3f       	cpi	r25, 0xFF	; 255
 a06:	19 f4       	brne	.+6      	; 0xa0e <__addsf3+0x24>
 a08:	26 f4       	brtc	.+8      	; 0xa12 <__addsf3+0x28>
 a0a:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_nan>
 a0e:	0e f4       	brtc	.+2      	; 0xa12 <__addsf3+0x28>
 a10:	e0 95       	com	r30
 a12:	e7 fb       	bst	r30, 7
 a14:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>

00000a18 <__addsf3x>:
 a18:	e9 2f       	mov	r30, r25
 a1a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_split3>
 a1e:	58 f3       	brcs	.-42     	; 0x9f6 <__addsf3+0xc>
 a20:	ba 17       	cp	r27, r26
 a22:	62 07       	cpc	r22, r18
 a24:	73 07       	cpc	r23, r19
 a26:	84 07       	cpc	r24, r20
 a28:	95 07       	cpc	r25, r21
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__addsf3x+0x1c>
 a2c:	79 f4       	brne	.+30     	; 0xa4c <__addsf3x+0x34>
 a2e:	a6 f5       	brtc	.+104    	; 0xa98 <__addsf3x+0x80>
 a30:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_zero>
 a34:	0e f4       	brtc	.+2      	; 0xa38 <__addsf3x+0x20>
 a36:	e0 95       	com	r30
 a38:	0b 2e       	mov	r0, r27
 a3a:	ba 2f       	mov	r27, r26
 a3c:	a0 2d       	mov	r26, r0
 a3e:	0b 01       	movw	r0, r22
 a40:	b9 01       	movw	r22, r18
 a42:	90 01       	movw	r18, r0
 a44:	0c 01       	movw	r0, r24
 a46:	ca 01       	movw	r24, r20
 a48:	a0 01       	movw	r20, r0
 a4a:	11 24       	eor	r1, r1
 a4c:	ff 27       	eor	r31, r31
 a4e:	59 1b       	sub	r21, r25
 a50:	99 f0       	breq	.+38     	; 0xa78 <__addsf3x+0x60>
 a52:	59 3f       	cpi	r21, 0xF9	; 249
 a54:	50 f4       	brcc	.+20     	; 0xa6a <__addsf3x+0x52>
 a56:	50 3e       	cpi	r21, 0xE0	; 224
 a58:	68 f1       	brcs	.+90     	; 0xab4 <__addsf3x+0x9c>
 a5a:	1a 16       	cp	r1, r26
 a5c:	f0 40       	sbci	r31, 0x00	; 0
 a5e:	a2 2f       	mov	r26, r18
 a60:	23 2f       	mov	r18, r19
 a62:	34 2f       	mov	r19, r20
 a64:	44 27       	eor	r20, r20
 a66:	58 5f       	subi	r21, 0xF8	; 248
 a68:	f3 cf       	rjmp	.-26     	; 0xa50 <__addsf3x+0x38>
 a6a:	46 95       	lsr	r20
 a6c:	37 95       	ror	r19
 a6e:	27 95       	ror	r18
 a70:	a7 95       	ror	r26
 a72:	f0 40       	sbci	r31, 0x00	; 0
 a74:	53 95       	inc	r21
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__addsf3x+0x52>
 a78:	7e f4       	brtc	.+30     	; 0xa98 <__addsf3x+0x80>
 a7a:	1f 16       	cp	r1, r31
 a7c:	ba 0b       	sbc	r27, r26
 a7e:	62 0b       	sbc	r22, r18
 a80:	73 0b       	sbc	r23, r19
 a82:	84 0b       	sbc	r24, r20
 a84:	ba f0       	brmi	.+46     	; 0xab4 <__addsf3x+0x9c>
 a86:	91 50       	subi	r25, 0x01	; 1
 a88:	a1 f0       	breq	.+40     	; 0xab2 <__addsf3x+0x9a>
 a8a:	ff 0f       	add	r31, r31
 a8c:	bb 1f       	adc	r27, r27
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	c2 f7       	brpl	.-16     	; 0xa86 <__addsf3x+0x6e>
 a96:	0e c0       	rjmp	.+28     	; 0xab4 <__addsf3x+0x9c>
 a98:	ba 0f       	add	r27, r26
 a9a:	62 1f       	adc	r22, r18
 a9c:	73 1f       	adc	r23, r19
 a9e:	84 1f       	adc	r24, r20
 aa0:	48 f4       	brcc	.+18     	; 0xab4 <__addsf3x+0x9c>
 aa2:	87 95       	ror	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	b7 95       	ror	r27
 aaa:	f7 95       	ror	r31
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	08 f0       	brcs	.+2      	; 0xab2 <__addsf3x+0x9a>
 ab0:	b0 cf       	rjmp	.-160    	; 0xa12 <__addsf3+0x28>
 ab2:	93 95       	inc	r25
 ab4:	88 0f       	add	r24, r24
 ab6:	08 f0       	brcs	.+2      	; 0xaba <__addsf3x+0xa2>
 ab8:	99 27       	eor	r25, r25
 aba:	ee 0f       	add	r30, r30
 abc:	97 95       	ror	r25
 abe:	87 95       	ror	r24
 ac0:	08 95       	ret

00000ac2 <ceil>:
 ac2:	0e 94 86 06 	call	0xd0c	; 0xd0c <__fp_trunc>
 ac6:	90 f0       	brcs	.+36     	; 0xaec <ceil+0x2a>
 ac8:	9f 37       	cpi	r25, 0x7F	; 127
 aca:	48 f4       	brcc	.+18     	; 0xade <ceil+0x1c>
 acc:	91 11       	cpse	r25, r1
 ace:	16 f4       	brtc	.+4      	; 0xad4 <ceil+0x12>
 ad0:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
 ad4:	60 e0       	ldi	r22, 0x00	; 0
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	80 e8       	ldi	r24, 0x80	; 128
 ada:	9f e3       	ldi	r25, 0x3F	; 63
 adc:	08 95       	ret
 ade:	26 f0       	brts	.+8      	; 0xae8 <ceil+0x26>
 ae0:	1b 16       	cp	r1, r27
 ae2:	61 1d       	adc	r22, r1
 ae4:	71 1d       	adc	r23, r1
 ae6:	81 1d       	adc	r24, r1
 ae8:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_mintl>
 aec:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_mpack>

00000af0 <__cmpsf2>:
 af0:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_cmp>
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <__cmpsf2+0x8>
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	08 95       	ret

00000afa <__divsf3>:
 afa:	0e 94 91 05 	call	0xb22	; 0xb22 <__divsf3x>
 afe:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_round>
 b02:	0e 94 4c 06 	call	0xc98	; 0xc98 <__fp_pscB>
 b06:	58 f0       	brcs	.+22     	; 0xb1e <__divsf3+0x24>
 b08:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_pscA>
 b0c:	40 f0       	brcs	.+16     	; 0xb1e <__divsf3+0x24>
 b0e:	29 f4       	brne	.+10     	; 0xb1a <__divsf3+0x20>
 b10:	5f 3f       	cpi	r21, 0xFF	; 255
 b12:	29 f0       	breq	.+10     	; 0xb1e <__divsf3+0x24>
 b14:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>
 b18:	51 11       	cpse	r21, r1
 b1a:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
 b1e:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__fp_nan>

00000b22 <__divsf3x>:
 b22:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_split3>
 b26:	68 f3       	brcs	.-38     	; 0xb02 <__divsf3+0x8>

00000b28 <__divsf3_pse>:
 b28:	99 23       	and	r25, r25
 b2a:	b1 f3       	breq	.-20     	; 0xb18 <__divsf3+0x1e>
 b2c:	55 23       	and	r21, r21
 b2e:	91 f3       	breq	.-28     	; 0xb14 <__divsf3+0x1a>
 b30:	95 1b       	sub	r25, r21
 b32:	55 0b       	sbc	r21, r21
 b34:	bb 27       	eor	r27, r27
 b36:	aa 27       	eor	r26, r26
 b38:	62 17       	cp	r22, r18
 b3a:	73 07       	cpc	r23, r19
 b3c:	84 07       	cpc	r24, r20
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__divsf3_pse+0x26>
 b40:	9f 5f       	subi	r25, 0xFF	; 255
 b42:	5f 4f       	sbci	r21, 0xFF	; 255
 b44:	22 0f       	add	r18, r18
 b46:	33 1f       	adc	r19, r19
 b48:	44 1f       	adc	r20, r20
 b4a:	aa 1f       	adc	r26, r26
 b4c:	a9 f3       	breq	.-22     	; 0xb38 <__divsf3_pse+0x10>
 b4e:	35 d0       	rcall	.+106    	; 0xbba <__divsf3_pse+0x92>
 b50:	0e 2e       	mov	r0, r30
 b52:	3a f0       	brmi	.+14     	; 0xb62 <__divsf3_pse+0x3a>
 b54:	e0 e8       	ldi	r30, 0x80	; 128
 b56:	32 d0       	rcall	.+100    	; 0xbbc <__divsf3_pse+0x94>
 b58:	91 50       	subi	r25, 0x01	; 1
 b5a:	50 40       	sbci	r21, 0x00	; 0
 b5c:	e6 95       	lsr	r30
 b5e:	00 1c       	adc	r0, r0
 b60:	ca f7       	brpl	.-14     	; 0xb54 <__divsf3_pse+0x2c>
 b62:	2b d0       	rcall	.+86     	; 0xbba <__divsf3_pse+0x92>
 b64:	fe 2f       	mov	r31, r30
 b66:	29 d0       	rcall	.+82     	; 0xbba <__divsf3_pse+0x92>
 b68:	66 0f       	add	r22, r22
 b6a:	77 1f       	adc	r23, r23
 b6c:	88 1f       	adc	r24, r24
 b6e:	bb 1f       	adc	r27, r27
 b70:	26 17       	cp	r18, r22
 b72:	37 07       	cpc	r19, r23
 b74:	48 07       	cpc	r20, r24
 b76:	ab 07       	cpc	r26, r27
 b78:	b0 e8       	ldi	r27, 0x80	; 128
 b7a:	09 f0       	breq	.+2      	; 0xb7e <__divsf3_pse+0x56>
 b7c:	bb 0b       	sbc	r27, r27
 b7e:	80 2d       	mov	r24, r0
 b80:	bf 01       	movw	r22, r30
 b82:	ff 27       	eor	r31, r31
 b84:	93 58       	subi	r25, 0x83	; 131
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	3a f0       	brmi	.+14     	; 0xb98 <__divsf3_pse+0x70>
 b8a:	9e 3f       	cpi	r25, 0xFE	; 254
 b8c:	51 05       	cpc	r21, r1
 b8e:	78 f0       	brcs	.+30     	; 0xbae <__divsf3_pse+0x86>
 b90:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_inf>
 b94:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_szero>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	e4 f3       	brlt	.-8      	; 0xb94 <__divsf3_pse+0x6c>
 b9c:	98 3e       	cpi	r25, 0xE8	; 232
 b9e:	d4 f3       	brlt	.-12     	; 0xb94 <__divsf3_pse+0x6c>
 ba0:	86 95       	lsr	r24
 ba2:	77 95       	ror	r23
 ba4:	67 95       	ror	r22
 ba6:	b7 95       	ror	r27
 ba8:	f7 95       	ror	r31
 baa:	9f 5f       	subi	r25, 0xFF	; 255
 bac:	c9 f7       	brne	.-14     	; 0xba0 <__divsf3_pse+0x78>
 bae:	88 0f       	add	r24, r24
 bb0:	91 1d       	adc	r25, r1
 bb2:	96 95       	lsr	r25
 bb4:	87 95       	ror	r24
 bb6:	97 f9       	bld	r25, 7
 bb8:	08 95       	ret
 bba:	e1 e0       	ldi	r30, 0x01	; 1
 bbc:	66 0f       	add	r22, r22
 bbe:	77 1f       	adc	r23, r23
 bc0:	88 1f       	adc	r24, r24
 bc2:	bb 1f       	adc	r27, r27
 bc4:	62 17       	cp	r22, r18
 bc6:	73 07       	cpc	r23, r19
 bc8:	84 07       	cpc	r24, r20
 bca:	ba 07       	cpc	r27, r26
 bcc:	20 f0       	brcs	.+8      	; 0xbd6 <__divsf3_pse+0xae>
 bce:	62 1b       	sub	r22, r18
 bd0:	73 0b       	sbc	r23, r19
 bd2:	84 0b       	sbc	r24, r20
 bd4:	ba 0b       	sbc	r27, r26
 bd6:	ee 1f       	adc	r30, r30
 bd8:	88 f7       	brcc	.-30     	; 0xbbc <__divsf3_pse+0x94>
 bda:	e0 95       	com	r30
 bdc:	08 95       	ret

00000bde <__fp_cmp>:
 bde:	99 0f       	add	r25, r25
 be0:	00 08       	sbc	r0, r0
 be2:	55 0f       	add	r21, r21
 be4:	aa 0b       	sbc	r26, r26
 be6:	e0 e8       	ldi	r30, 0x80	; 128
 be8:	fe ef       	ldi	r31, 0xFE	; 254
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	e8 07       	cpc	r30, r24
 bf0:	f9 07       	cpc	r31, r25
 bf2:	c0 f0       	brcs	.+48     	; 0xc24 <__fp_cmp+0x46>
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	e4 07       	cpc	r30, r20
 bfa:	f5 07       	cpc	r31, r21
 bfc:	98 f0       	brcs	.+38     	; 0xc24 <__fp_cmp+0x46>
 bfe:	62 1b       	sub	r22, r18
 c00:	73 0b       	sbc	r23, r19
 c02:	84 0b       	sbc	r24, r20
 c04:	95 0b       	sbc	r25, r21
 c06:	39 f4       	brne	.+14     	; 0xc16 <__fp_cmp+0x38>
 c08:	0a 26       	eor	r0, r26
 c0a:	61 f0       	breq	.+24     	; 0xc24 <__fp_cmp+0x46>
 c0c:	23 2b       	or	r18, r19
 c0e:	24 2b       	or	r18, r20
 c10:	25 2b       	or	r18, r21
 c12:	21 f4       	brne	.+8      	; 0xc1c <__fp_cmp+0x3e>
 c14:	08 95       	ret
 c16:	0a 26       	eor	r0, r26
 c18:	09 f4       	brne	.+2      	; 0xc1c <__fp_cmp+0x3e>
 c1a:	a1 40       	sbci	r26, 0x01	; 1
 c1c:	a6 95       	lsr	r26
 c1e:	8f ef       	ldi	r24, 0xFF	; 255
 c20:	81 1d       	adc	r24, r1
 c22:	81 1d       	adc	r24, r1
 c24:	08 95       	ret

00000c26 <__fp_inf>:
 c26:	97 f9       	bld	r25, 7
 c28:	9f 67       	ori	r25, 0x7F	; 127
 c2a:	80 e8       	ldi	r24, 0x80	; 128
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	08 95       	ret

00000c32 <__fp_mintl>:
 c32:	88 23       	and	r24, r24
 c34:	71 f4       	brne	.+28     	; 0xc52 <__fp_mintl+0x20>
 c36:	77 23       	and	r23, r23
 c38:	21 f0       	breq	.+8      	; 0xc42 <__fp_mintl+0x10>
 c3a:	98 50       	subi	r25, 0x08	; 8
 c3c:	87 2b       	or	r24, r23
 c3e:	76 2f       	mov	r23, r22
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <__fp_mintl+0x1e>
 c42:	66 23       	and	r22, r22
 c44:	11 f4       	brne	.+4      	; 0xc4a <__fp_mintl+0x18>
 c46:	99 27       	eor	r25, r25
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <__fp_mintl+0x32>
 c4a:	90 51       	subi	r25, 0x10	; 16
 c4c:	86 2b       	or	r24, r22
 c4e:	70 e0       	ldi	r23, 0x00	; 0
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	2a f0       	brmi	.+10     	; 0xc5e <__fp_mintl+0x2c>
 c54:	9a 95       	dec	r25
 c56:	66 0f       	add	r22, r22
 c58:	77 1f       	adc	r23, r23
 c5a:	88 1f       	adc	r24, r24
 c5c:	da f7       	brpl	.-10     	; 0xc54 <__fp_mintl+0x22>
 c5e:	88 0f       	add	r24, r24
 c60:	96 95       	lsr	r25
 c62:	87 95       	ror	r24
 c64:	97 f9       	bld	r25, 7
 c66:	08 95       	ret

00000c68 <__fp_mpack>:
 c68:	9f 3f       	cpi	r25, 0xFF	; 255
 c6a:	31 f0       	breq	.+12     	; 0xc78 <__fp_mpack_finite+0xc>

00000c6c <__fp_mpack_finite>:
 c6c:	91 50       	subi	r25, 0x01	; 1
 c6e:	20 f4       	brcc	.+8      	; 0xc78 <__fp_mpack_finite+0xc>
 c70:	87 95       	ror	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b7 95       	ror	r27
 c78:	88 0f       	add	r24, r24
 c7a:	91 1d       	adc	r25, r1
 c7c:	96 95       	lsr	r25
 c7e:	87 95       	ror	r24
 c80:	97 f9       	bld	r25, 7
 c82:	08 95       	ret

00000c84 <__fp_nan>:
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	80 ec       	ldi	r24, 0xC0	; 192
 c88:	08 95       	ret

00000c8a <__fp_pscA>:
 c8a:	00 24       	eor	r0, r0
 c8c:	0a 94       	dec	r0
 c8e:	16 16       	cp	r1, r22
 c90:	17 06       	cpc	r1, r23
 c92:	18 06       	cpc	r1, r24
 c94:	09 06       	cpc	r0, r25
 c96:	08 95       	ret

00000c98 <__fp_pscB>:
 c98:	00 24       	eor	r0, r0
 c9a:	0a 94       	dec	r0
 c9c:	12 16       	cp	r1, r18
 c9e:	13 06       	cpc	r1, r19
 ca0:	14 06       	cpc	r1, r20
 ca2:	05 06       	cpc	r0, r21
 ca4:	08 95       	ret

00000ca6 <__fp_round>:
 ca6:	09 2e       	mov	r0, r25
 ca8:	03 94       	inc	r0
 caa:	00 0c       	add	r0, r0
 cac:	11 f4       	brne	.+4      	; 0xcb2 <__fp_round+0xc>
 cae:	88 23       	and	r24, r24
 cb0:	52 f0       	brmi	.+20     	; 0xcc6 <__fp_round+0x20>
 cb2:	bb 0f       	add	r27, r27
 cb4:	40 f4       	brcc	.+16     	; 0xcc6 <__fp_round+0x20>
 cb6:	bf 2b       	or	r27, r31
 cb8:	11 f4       	brne	.+4      	; 0xcbe <__fp_round+0x18>
 cba:	60 ff       	sbrs	r22, 0
 cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__fp_round+0x20>
 cbe:	6f 5f       	subi	r22, 0xFF	; 255
 cc0:	7f 4f       	sbci	r23, 0xFF	; 255
 cc2:	8f 4f       	sbci	r24, 0xFF	; 255
 cc4:	9f 4f       	sbci	r25, 0xFF	; 255
 cc6:	08 95       	ret

00000cc8 <__fp_split3>:
 cc8:	57 fd       	sbrc	r21, 7
 cca:	90 58       	subi	r25, 0x80	; 128
 ccc:	44 0f       	add	r20, r20
 cce:	55 1f       	adc	r21, r21
 cd0:	59 f0       	breq	.+22     	; 0xce8 <__fp_splitA+0x10>
 cd2:	5f 3f       	cpi	r21, 0xFF	; 255
 cd4:	71 f0       	breq	.+28     	; 0xcf2 <__fp_splitA+0x1a>
 cd6:	47 95       	ror	r20

00000cd8 <__fp_splitA>:
 cd8:	88 0f       	add	r24, r24
 cda:	97 fb       	bst	r25, 7
 cdc:	99 1f       	adc	r25, r25
 cde:	61 f0       	breq	.+24     	; 0xcf8 <__fp_splitA+0x20>
 ce0:	9f 3f       	cpi	r25, 0xFF	; 255
 ce2:	79 f0       	breq	.+30     	; 0xd02 <__fp_splitA+0x2a>
 ce4:	87 95       	ror	r24
 ce6:	08 95       	ret
 ce8:	12 16       	cp	r1, r18
 cea:	13 06       	cpc	r1, r19
 cec:	14 06       	cpc	r1, r20
 cee:	55 1f       	adc	r21, r21
 cf0:	f2 cf       	rjmp	.-28     	; 0xcd6 <__fp_split3+0xe>
 cf2:	46 95       	lsr	r20
 cf4:	f1 df       	rcall	.-30     	; 0xcd8 <__fp_splitA>
 cf6:	08 c0       	rjmp	.+16     	; 0xd08 <__fp_splitA+0x30>
 cf8:	16 16       	cp	r1, r22
 cfa:	17 06       	cpc	r1, r23
 cfc:	18 06       	cpc	r1, r24
 cfe:	99 1f       	adc	r25, r25
 d00:	f1 cf       	rjmp	.-30     	; 0xce4 <__fp_splitA+0xc>
 d02:	86 95       	lsr	r24
 d04:	71 05       	cpc	r23, r1
 d06:	61 05       	cpc	r22, r1
 d08:	08 94       	sec
 d0a:	08 95       	ret

00000d0c <__fp_trunc>:
 d0c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fp_splitA>
 d10:	a0 f0       	brcs	.+40     	; 0xd3a <__fp_trunc+0x2e>
 d12:	be e7       	ldi	r27, 0x7E	; 126
 d14:	b9 17       	cp	r27, r25
 d16:	88 f4       	brcc	.+34     	; 0xd3a <__fp_trunc+0x2e>
 d18:	bb 27       	eor	r27, r27
 d1a:	9f 38       	cpi	r25, 0x8F	; 143
 d1c:	60 f4       	brcc	.+24     	; 0xd36 <__fp_trunc+0x2a>
 d1e:	16 16       	cp	r1, r22
 d20:	b1 1d       	adc	r27, r1
 d22:	67 2f       	mov	r22, r23
 d24:	78 2f       	mov	r23, r24
 d26:	88 27       	eor	r24, r24
 d28:	98 5f       	subi	r25, 0xF8	; 248
 d2a:	f7 cf       	rjmp	.-18     	; 0xd1a <__fp_trunc+0xe>
 d2c:	86 95       	lsr	r24
 d2e:	77 95       	ror	r23
 d30:	67 95       	ror	r22
 d32:	b1 1d       	adc	r27, r1
 d34:	93 95       	inc	r25
 d36:	96 39       	cpi	r25, 0x96	; 150
 d38:	c8 f3       	brcs	.-14     	; 0xd2c <__fp_trunc+0x20>
 d3a:	08 95       	ret

00000d3c <__fp_zero>:
 d3c:	e8 94       	clt

00000d3e <__fp_szero>:
 d3e:	bb 27       	eor	r27, r27
 d40:	66 27       	eor	r22, r22
 d42:	77 27       	eor	r23, r23
 d44:	cb 01       	movw	r24, r22
 d46:	97 f9       	bld	r25, 7
 d48:	08 95       	ret

00000d4a <__gesf2>:
 d4a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_cmp>
 d4e:	08 f4       	brcc	.+2      	; 0xd52 <__gesf2+0x8>
 d50:	8f ef       	ldi	r24, 0xFF	; 255
 d52:	08 95       	ret

00000d54 <__tablejump2__>:
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	05 90       	lpm	r0, Z+
 d5a:	f4 91       	lpm	r31, Z
 d5c:	e0 2d       	mov	r30, r0
 d5e:	09 94       	ijmp

00000d60 <_exit>:
 d60:	f8 94       	cli

00000d62 <__stop_program>:
 d62:	ff cf       	rjmp	.-2      	; 0xd62 <__stop_program>
