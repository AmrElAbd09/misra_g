
LED_Sequence.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef5  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c9  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000736  00000000  00000000  00002ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000320b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  64:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <APP_init>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
void APP_init()
{
	LED_init(portb, pin0);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	0e 94 ba 00 	call	0x174	; 0x174 <LED_init>
	LED_init(portb, pin1);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 ba 00 	call	0x174	; 0x174 <LED_init>
	LED_init(portb, pin2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	0e 94 ba 00 	call	0x174	; 0x174 <LED_init>
	LED_init(portb, pin3);
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 ba 00 	call	0x174	; 0x174 <LED_init>
	button_init(portc, pin1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 a1 00 	call	0x142	; 0x142 <button_init>
  94:	08 95       	ret

00000096 <APP_start>:
}


void APP_start()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	enu_state_t buttonSTATE;
	uint8_t counter = 0;
  a0:	10 e0       	ldi	r17, 0x00	; 0
	while(1){
		button_read(portc,pin1,&buttonSTATE);
  a2:	ae 01       	movw	r20, r28
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 ae 00 	call	0x15c	; 0x15c <button_read>
		if(buttonSTATE == HIGH)
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	61 f4       	brne	.+24     	; 0xce <APP_start+0x38>
		{
			counter++;
  b6:	1f 5f       	subi	r17, 0xFF	; 255
			while (buttonSTATE == HIGH)
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <APP_start+0x32>
			{
				button_read(portc,pin1,&buttonSTATE);
  ba:	ae 01       	movw	r20, r28
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	5f 4f       	sbci	r21, 0xFF	; 255
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 ae 00 	call	0x15c	; 0x15c <button_read>
	while(1){
		button_read(portc,pin1,&buttonSTATE);
		if(buttonSTATE == HIGH)
		{
			counter++;
			while (buttonSTATE == HIGH)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	b1 f3       	breq	.-20     	; 0xba <APP_start+0x24>
			{
				button_read(portc,pin1,&buttonSTATE);
			}
		}
			if(counter ==1){
  ce:	11 30       	cpi	r17, 0x01	; 1
  d0:	29 f4       	brne	.+10     	; 0xdc <APP_start+0x46>
				LED_on(portb,pin0);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
  da:	e3 cf       	rjmp	.-58     	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==2){
  dc:	12 30       	cpi	r17, 0x02	; 2
  de:	29 f4       	brne	.+10     	; 0xea <APP_start+0x54>
				LED_on(portb,pin1);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
  e8:	dc cf       	rjmp	.-72     	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==3){
  ea:	13 30       	cpi	r17, 0x03	; 3
  ec:	29 f4       	brne	.+10     	; 0xf8 <APP_start+0x62>
				LED_on(portb,pin2);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
  f6:	d5 cf       	rjmp	.-86     	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==4){
  f8:	14 30       	cpi	r17, 0x04	; 4
  fa:	29 f4       	brne	.+10     	; 0x106 <APP_start+0x70>
				LED_on(portb,pin3);
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 c7 00 	call	0x18e	; 0x18e <LED_on>
 104:	ce cf       	rjmp	.-100    	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==5){
 106:	15 30       	cpi	r17, 0x05	; 5
 108:	29 f4       	brne	.+10     	; 0x114 <APP_start+0x7e>
				LED_off(portb,pin0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LED_off>
 112:	c7 cf       	rjmp	.-114    	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==6){
 114:	16 30       	cpi	r17, 0x06	; 6
 116:	29 f4       	brne	.+10     	; 0x122 <APP_start+0x8c>
				LED_off(portb,pin1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LED_off>
 120:	c0 cf       	rjmp	.-128    	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==7){
 122:	17 30       	cpi	r17, 0x07	; 7
 124:	29 f4       	brne	.+10     	; 0x130 <APP_start+0x9a>
				LED_off(portb,pin2);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LED_off>
 12e:	b9 cf       	rjmp	.-142    	; 0xa2 <APP_start+0xc>
			}
			else if(counter ==8){
 130:	18 30       	cpi	r17, 0x08	; 8
 132:	09 f0       	breq	.+2      	; 0x136 <APP_start+0xa0>
 134:	b6 cf       	rjmp	.-148    	; 0xa2 <APP_start+0xc>
				LED_off(portb,pin3);
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LED_off>
				counter =0;
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	b0 cf       	rjmp	.-160    	; 0xa2 <APP_start+0xc>

00000142 <button_init>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
enu_return_t button_init(enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	38 f4       	brcc	.+14     	; 0x154 <button_init+0x12>
 146:	68 30       	cpi	r22, 0x08	; 8
 148:	38 f4       	brcc	.+14     	; 0x158 <button_init+0x16>
		return NOT_OK;
	}
	dio_init(port,pin,INPUT);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_init>
	return OK;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
enu_return_t button_init(enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	81 e0       	ldi	r24, 0x01	; 1
	}
	dio_init(port,pin,INPUT);
	return OK;
}
 15a:	08 95       	ret

0000015c <button_read>:

enu_return_t button_read(enu_ports_t port,enu_pins_t pin, enu_state_t* state)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	30 f4       	brcc	.+12     	; 0x16c <button_read+0x10>
 160:	68 30       	cpi	r22, 0x08	; 8
 162:	30 f4       	brcc	.+12     	; 0x170 <button_read+0x14>
		return NOT_OK;
	}
	dio_read(port,pin,state);
 164:	0e 94 04 02 	call	0x408	; 0x408 <dio_read>
	return OK;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
}

enu_return_t button_read(enu_ports_t port,enu_pins_t pin, enu_state_t* state)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	08 95       	ret
 170:	81 e0       	ldi	r24, 0x01	; 1
	}
	dio_read(port,pin,state);
	return OK;
}
 172:	08 95       	ret

00000174 <LED_init>:
/*****************************************************************************************************************************************************************
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
enu_return_t LED_init (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	38 f4       	brcc	.+14     	; 0x186 <LED_init+0x12>
 178:	68 30       	cpi	r22, 0x08	; 8
 17a:	38 f4       	brcc	.+14     	; 0x18a <LED_init+0x16>
		return NOT_OK;
	}
	dio_init(port,pin,OUTPUT);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_init>
	return OK;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
enu_return_t LED_init (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
	}
	dio_init(port,pin,OUTPUT);
	return OK;
}
 18c:	08 95       	ret

0000018e <LED_on>:

enu_return_t LED_on (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	38 f4       	brcc	.+14     	; 0x1a0 <LED_on+0x12>
 192:	68 30       	cpi	r22, 0x08	; 8
 194:	38 f4       	brcc	.+14     	; 0x1a4 <LED_on+0x16>
		return NOT_OK;
	}
	dio_write(port,pin,HIGH);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	0e 94 77 01 	call	0x2ee	; 0x2ee <dio_write>
	return OK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
}

enu_return_t LED_on (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	dio_write(port,pin,HIGH);
	return OK;
}
 1a6:	08 95       	ret

000001a8 <LED_off>:

enu_return_t LED_off (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	38 f4       	brcc	.+14     	; 0x1ba <LED_off+0x12>
 1ac:	68 30       	cpi	r22, 0x08	; 8
 1ae:	38 f4       	brcc	.+14     	; 0x1be <LED_off+0x16>
		return NOT_OK;	
	}
		dio_write(port,pin,LOW);
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <dio_write>
		return OK;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
}

enu_return_t LED_off (enu_ports_t port, enu_pins_t pin)
{
	if(port < porta || port > portd || pin < pin0 || pin > pin7){
		return NOT_OK;	
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
	}
		dio_write(port,pin,LOW);
		return OK;
}
 1c0:	08 95       	ret

000001c2 <main>:

#include "Application/app.h"

int main(void)
{
	APP_init();
 1c2:	0e 94 36 00 	call	0x6c	; 0x6c <APP_init>
	APP_start();		
 1c6:	0e 94 4b 00 	call	0x96	; 0x96 <APP_start>
}
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <dio_init>:
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
	if ((enu_port > portd) || (enu_pin > pin7))
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <dio_init+0x6>
 1d4:	7e c0       	rjmp	.+252    	; 0x2d2 <dio_init+0x102>
 1d6:	68 30       	cpi	r22, 0x08	; 8
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <dio_init+0xc>
 1da:	7d c0       	rjmp	.+250    	; 0x2d6 <dio_init+0x106>
	{
		enu_retval = NOT_OK;
	}
	else
	{
		switch (enu_port)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	21 f1       	breq	.+72     	; 0x228 <dio_init+0x58>
 1e0:	30 f0       	brcs	.+12     	; 0x1ee <dio_init+0x1e>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	f1 f1       	breq	.+124    	; 0x262 <dio_init+0x92>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	09 f4       	brne	.+2      	; 0x1ec <dio_init+0x1c>
 1ea:	57 c0       	rjmp	.+174    	; 0x29a <dio_init+0xca>
 1ec:	76 c0       	rjmp	.+236    	; 0x2da <dio_init+0x10a>
		{
			case porta :
			{
				if(enu_direction == INPUT){
 1ee:	41 11       	cpse	r20, r1
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <dio_init+0x3a>
					RESET_BIT(DDRA,enu_pin);
 1f2:	2a b3       	in	r18, 0x1a	; 26
 1f4:	8e ef       	ldi	r24, 0xFE	; 254
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <dio_init+0x2e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <dio_init+0x2a>
 202:	82 23       	and	r24, r18
 204:	8a bb       	out	0x1a, r24	; 26
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
			case porta :
			{
				if(enu_direction == INPUT){
					RESET_BIT(DDRA,enu_pin);
				}
				else if(enu_direction == OUTPUT){
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	09 f0       	breq	.+2      	; 0x210 <dio_init+0x40>
 20e:	67 c0       	rjmp	.+206    	; 0x2de <dio_init+0x10e>
					SET_BIT(DDRA, enu_pin);
 210:	2a b3       	in	r18, 0x1a	; 26
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <dio_init+0x4c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <dio_init+0x48>
 220:	82 2b       	or	r24, r18
 222:	8a bb       	out	0x1a, r24	; 26
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
				}
			}
			break;
			case portb :
			{
				if(enu_direction == INPUT){
 228:	41 11       	cpse	r20, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <dio_init+0x74>
					RESET_BIT(DDRB,enu_pin);
 22c:	27 b3       	in	r18, 0x17	; 23
 22e:	8e ef       	ldi	r24, 0xFE	; 254
 230:	9f ef       	ldi	r25, 0xFF	; 255
 232:	02 c0       	rjmp	.+4      	; 0x238 <dio_init+0x68>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <dio_init+0x64>
 23c:	82 23       	and	r24, r18
 23e:	87 bb       	out	0x17, r24	; 23
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 95       	ret
			case portb :
			{
				if(enu_direction == INPUT){
					RESET_BIT(DDRB,enu_pin);
				}
				else if(enu_direction == OUTPUT){
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <dio_init+0x7a>
 248:	4c c0       	rjmp	.+152    	; 0x2e2 <dio_init+0x112>
					SET_BIT(DDRB, enu_pin);
 24a:	27 b3       	in	r18, 0x17	; 23
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <dio_init+0x86>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <dio_init+0x82>
 25a:	82 2b       	or	r24, r18
 25c:	87 bb       	out	0x17, r24	; 23
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
				}
			}
			break;
			case portc :
			{
				if(enu_direction == INPUT)
 262:	41 11       	cpse	r20, r1
 264:	0c c0       	rjmp	.+24     	; 0x27e <dio_init+0xae>
				{
					RESET_BIT(DDRC,enu_pin);
 266:	24 b3       	in	r18, 0x14	; 20
 268:	8e ef       	ldi	r24, 0xFE	; 254
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	02 c0       	rjmp	.+4      	; 0x272 <dio_init+0xa2>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <dio_init+0x9e>
 276:	82 23       	and	r24, r18
 278:	84 bb       	out	0x14, r24	; 20
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
			{
				if(enu_direction == INPUT)
				{
					RESET_BIT(DDRC,enu_pin);
				}
				else if(enu_direction == OUTPUT){
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	91 f5       	brne	.+100    	; 0x2e6 <dio_init+0x116>
					SET_BIT(DDRC, enu_pin);
 282:	24 b3       	in	r18, 0x14	; 20
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <dio_init+0xbe>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <dio_init+0xba>
 292:	82 2b       	or	r24, r18
 294:	84 bb       	out	0x14, r24	; 20
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
				}
			}
			break;
			case portd :
			{
				if(enu_direction == INPUT)
 29a:	41 11       	cpse	r20, r1
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <dio_init+0xe6>
				{
					RESET_BIT(DDRD,enu_pin);
 29e:	21 b3       	in	r18, 0x11	; 17
 2a0:	8e ef       	ldi	r24, 0xFE	; 254
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_init+0xda>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_init+0xd6>
 2ae:	82 23       	and	r24, r18
 2b0:	81 bb       	out	0x11, r24	; 17
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
			{
				if(enu_direction == INPUT)
				{
					RESET_BIT(DDRD,enu_pin);
				}
				else if(enu_direction == OUTPUT){
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	c1 f4       	brne	.+48     	; 0x2ea <dio_init+0x11a>
					SET_BIT(DDRD, enu_pin);
 2ba:	21 b3       	in	r18, 0x11	; 17
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_init+0xf6>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_init+0xf2>
 2ca:	82 2b       	or	r24, r18
 2cc:	81 bb       	out	0x11, r24	; 17
*																		Functions definitions 																	 *
******************************************************************************************************************************************************************/
//initialization function
enu_return_t dio_init (enu_ports_t enu_port, enu_pins_t enu_pin, enu_direction_t enu_direction)
{
	enu_return_t enu_retval = OK;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
	if ((enu_port > portd) || (enu_pin > pin7))
	{
		enu_retval = NOT_OK;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	08 95       	ret
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret
				}
			}
			break;
			default:
			{
				enu_retval = NOT_OK;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	08 95       	ret
				else if(enu_direction == OUTPUT){
					SET_BIT(DDRA, enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret
				else if(enu_direction == OUTPUT){
					SET_BIT(DDRB, enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	08 95       	ret
				else if(enu_direction == OUTPUT){
					SET_BIT(DDRC, enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret
				else if(enu_direction == OUTPUT){
					SET_BIT(DDRD, enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
				enu_retval = NOT_OK;
			}
		}
	}	
	return enu_retval;
}
 2ec:	08 95       	ret

000002ee <dio_write>:

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
	if ((enu_port > portd) || (enu_pin > pin7))
 2ee:	84 30       	cpi	r24, 0x04	; 4
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <dio_write+0x6>
 2f2:	7c c0       	rjmp	.+248    	; 0x3ec <dio_write+0xfe>
 2f4:	68 30       	cpi	r22, 0x08	; 8
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <dio_write+0xc>
 2f8:	7b c0       	rjmp	.+246    	; 0x3f0 <dio_write+0x102>
	{
		enu_retval = NOT_OK;
	}
	else
	{
		switch(enu_port){
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	19 f1       	breq	.+70     	; 0x344 <dio_write+0x56>
 2fe:	30 f0       	brcs	.+12     	; 0x30c <dio_write+0x1e>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	e1 f1       	breq	.+120    	; 0x37c <dio_write+0x8e>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	09 f4       	brne	.+2      	; 0x30a <dio_write+0x1c>
 308:	55 c0       	rjmp	.+170    	; 0x3b4 <dio_write+0xc6>
 30a:	74 c0       	rjmp	.+232    	; 0x3f4 <dio_write+0x106>
			case porta :
			{
				if(enu_state == HIGH)
 30c:	41 30       	cpi	r20, 0x01	; 1
 30e:	61 f4       	brne	.+24     	; 0x328 <dio_write+0x3a>
				{
					SET_BIT(PORTA, enu_pin);
 310:	2b b3       	in	r18, 0x1b	; 27
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <dio_write+0x2e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <dio_write+0x2a>
 320:	82 2b       	or	r24, r18
 322:	8b bb       	out	0x1b, r24	; 27
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
			{
				if(enu_state == HIGH)
				{
					SET_BIT(PORTA, enu_pin);
				}
				else if (enu_state == LOW){
 328:	41 11       	cpse	r20, r1
 32a:	66 c0       	rjmp	.+204    	; 0x3f8 <dio_write+0x10a>
					RESET_BIT(PORTA,enu_pin);
 32c:	2b b3       	in	r18, 0x1b	; 27
 32e:	8e ef       	ldi	r24, 0xFE	; 254
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_write+0x4a>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_write+0x46>
 33c:	82 23       	and	r24, r18
 33e:	8b bb       	out	0x1b, r24	; 27
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
				}
			}		
			break;
			case portb :
			{
				if(enu_state == HIGH)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	61 f4       	brne	.+24     	; 0x360 <dio_write+0x72>
				{
					SET_BIT(PORTB, enu_pin);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <dio_write+0x66>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <dio_write+0x62>
 358:	82 2b       	or	r24, r18
 35a:	88 bb       	out	0x18, r24	; 24
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
			{
				if(enu_state == HIGH)
				{
					SET_BIT(PORTB, enu_pin);
				}
				else if (enu_state == LOW){
 360:	41 11       	cpse	r20, r1
 362:	4c c0       	rjmp	.+152    	; 0x3fc <dio_write+0x10e>
					RESET_BIT(PORTB,enu_pin);
 364:	28 b3       	in	r18, 0x18	; 24
 366:	8e ef       	ldi	r24, 0xFE	; 254
 368:	9f ef       	ldi	r25, 0xFF	; 255
 36a:	02 c0       	rjmp	.+4      	; 0x370 <dio_write+0x82>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <dio_write+0x7e>
 374:	82 23       	and	r24, r18
 376:	88 bb       	out	0x18, r24	; 24
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
			}
			
			break;
			case portc :
			{
				if(enu_state == HIGH)
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	61 f4       	brne	.+24     	; 0x398 <dio_write+0xaa>
				{
					SET_BIT(PORTC, enu_pin);
 380:	25 b3       	in	r18, 0x15	; 21
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <dio_write+0x9e>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <dio_write+0x9a>
 390:	82 2b       	or	r24, r18
 392:	85 bb       	out	0x15, r24	; 21
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
			{
				if(enu_state == HIGH)
				{
					SET_BIT(PORTC, enu_pin);
				}
				else if (enu_state == LOW){
 398:	41 11       	cpse	r20, r1
 39a:	32 c0       	rjmp	.+100    	; 0x400 <__EEPROM_REGION_LENGTH__>
					RESET_BIT(PORTC,enu_pin);
 39c:	25 b3       	in	r18, 0x15	; 21
 39e:	8e ef       	ldi	r24, 0xFE	; 254
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <dio_write+0xba>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <dio_write+0xb6>
 3ac:	82 23       	and	r24, r18
 3ae:	85 bb       	out	0x15, r24	; 21
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret
			}
			
			break;
			case portd :
			{
				if(enu_state == HIGH)
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	61 f4       	brne	.+24     	; 0x3d0 <dio_write+0xe2>
				{
					SET_BIT(PORTD, enu_pin);
 3b8:	22 b3       	in	r18, 0x12	; 18
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <dio_write+0xd6>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <dio_write+0xd2>
 3c8:	82 2b       	or	r24, r18
 3ca:	82 bb       	out	0x12, r24	; 18
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	08 95       	ret
			{
				if(enu_state == HIGH)
				{
					SET_BIT(PORTD, enu_pin);
				}
				else if (enu_state == LOW){
 3d0:	41 11       	cpse	r20, r1
 3d2:	18 c0       	rjmp	.+48     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
					RESET_BIT(PORTD,enu_pin);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	8e ef       	ldi	r24, 0xFE	; 254
 3d8:	9f ef       	ldi	r25, 0xFF	; 255
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <dio_write+0xf2>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <dio_write+0xee>
 3e4:	82 23       	and	r24, r18
 3e6:	82 bb       	out	0x12, r24	; 18
}

//writing function
enu_return_t dio_write (enu_ports_t enu_port, enu_pins_t enu_pin, enu_state_t enu_state)
{
	enu_return_t enu_retval = OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
	if ((enu_port > portd) || (enu_pin > pin7))
	{
		enu_retval = NOT_OK;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
				}
			}
			break;			
			default:
			{
				enu_retval = NOT_OK;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
				else if (enu_state == LOW){
					RESET_BIT(PORTA,enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
				else if (enu_state == LOW){
					RESET_BIT(PORTB,enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
				else if (enu_state == LOW){
					RESET_BIT(PORTC,enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
				else if (enu_state == LOW){
					RESET_BIT(PORTD,enu_pin);
				}
				else
				{
					enu_retval = NOT_OK;
 404:	81 e0       	ldi	r24, 0x01	; 1
				enu_retval = NOT_OK;
			}
		}
	}
	return enu_retval;
}
 406:	08 95       	ret

00000408 <dio_read>:

//reading function
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
	if ((enu_port > portd) || (enu_pin > pin7))
 408:	84 30       	cpi	r24, 0x04	; 4
 40a:	08 f0       	brcs	.+2      	; 0x40e <dio_read+0x6>
 40c:	68 c0       	rjmp	.+208    	; 0x4de <dio_read+0xd6>
 40e:	68 30       	cpi	r22, 0x08	; 8
 410:	08 f0       	brcs	.+2      	; 0x414 <dio_read+0xc>
 412:	67 c0       	rjmp	.+206    	; 0x4e2 <dio_read+0xda>
	{
		enu_retval = NOT_OK;
	}
	else
	{	
		switch (enu_port)
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	f1 f0       	breq	.+60     	; 0x454 <dio_read+0x4c>
 418:	30 f0       	brcs	.+12     	; 0x426 <dio_read+0x1e>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	91 f1       	breq	.+100    	; 0x482 <dio_read+0x7a>
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	09 f4       	brne	.+2      	; 0x424 <dio_read+0x1c>
 422:	46 c0       	rjmp	.+140    	; 0x4b0 <dio_read+0xa8>
 424:	60 c0       	rjmp	.+192    	; 0x4e6 <dio_read+0xde>
		{
			case porta:
			{
				*value = READ_BIT(PINA,enu_pin);
 426:	79 b3       	in	r23, 0x19	; 25
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	9c 01       	movw	r18, r24
 42e:	06 2e       	mov	r0, r22
 430:	02 c0       	rjmp	.+4      	; 0x436 <dio_read+0x2e>
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <dio_read+0x2a>
 43a:	87 2f       	mov	r24, r23
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	82 23       	and	r24, r18
 440:	93 23       	and	r25, r19
 442:	02 c0       	rjmp	.+4      	; 0x448 <dio_read+0x40>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <dio_read+0x3c>
 44c:	fa 01       	movw	r30, r20
 44e:	80 83       	st	Z, r24
}

//reading function
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
		{
			case porta:
			{
				*value = READ_BIT(PINA,enu_pin);
			}
			break;
 452:	08 95       	ret
			case portb:
			{
				*value = READ_BIT(PINB,enu_pin);
 454:	76 b3       	in	r23, 0x16	; 22
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	9c 01       	movw	r18, r24
 45c:	06 2e       	mov	r0, r22
 45e:	02 c0       	rjmp	.+4      	; 0x464 <dio_read+0x5c>
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <dio_read+0x58>
 468:	87 2f       	mov	r24, r23
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	82 23       	and	r24, r18
 46e:	93 23       	and	r25, r19
 470:	02 c0       	rjmp	.+4      	; 0x476 <dio_read+0x6e>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <dio_read+0x6a>
 47a:	fa 01       	movw	r30, r20
 47c:	80 83       	st	Z, r24
}

//reading function
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
 47e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case portb:
			{
				*value = READ_BIT(PINB,enu_pin);
			}
			break;
 480:	08 95       	ret
			case portc:
			{
				*value = READ_BIT(PINC,enu_pin);
 482:	73 b3       	in	r23, 0x13	; 19
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	9c 01       	movw	r18, r24
 48a:	06 2e       	mov	r0, r22
 48c:	02 c0       	rjmp	.+4      	; 0x492 <dio_read+0x8a>
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <dio_read+0x86>
 496:	87 2f       	mov	r24, r23
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	82 23       	and	r24, r18
 49c:	93 23       	and	r25, r19
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <dio_read+0x9c>
 4a0:	95 95       	asr	r25
 4a2:	87 95       	ror	r24
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <dio_read+0x98>
 4a8:	fa 01       	movw	r30, r20
 4aa:	80 83       	st	Z, r24
}

//reading function
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case portc:
			{
				*value = READ_BIT(PINC,enu_pin);
			}
			break;
 4ae:	08 95       	ret
			case portd:
			{
				*value = READ_BIT(PIND,enu_pin);
 4b0:	70 b3       	in	r23, 0x10	; 16
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	9c 01       	movw	r18, r24
 4b8:	06 2e       	mov	r0, r22
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <dio_read+0xb8>
 4bc:	22 0f       	add	r18, r18
 4be:	33 1f       	adc	r19, r19
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <dio_read+0xb4>
 4c4:	87 2f       	mov	r24, r23
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	82 23       	and	r24, r18
 4ca:	93 23       	and	r25, r19
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <dio_read+0xca>
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <dio_read+0xc6>
 4d6:	fa 01       	movw	r30, r20
 4d8:	80 83       	st	Z, r24
}

//reading function
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
 4da:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case portd:
			{
				*value = READ_BIT(PIND,enu_pin);
			}
			break;
 4dc:	08 95       	ret
enu_return_t dio_read (enu_ports_t enu_port, enu_pins_t enu_pin, uint8_t* value)
{
	enu_return_t enu_retval = OK;
	if ((enu_port > portd) || (enu_pin > pin7))
	{
		enu_retval = NOT_OK;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret
				*value = READ_BIT(PIND,enu_pin);
			}
			break;
			default:
			{
				enu_retval = NOT_OK;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
return enu_retval ;
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
